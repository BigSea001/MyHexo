{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Vateral/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/Vateral.css","path":"css/Vateral.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/Vateral.min.css","path":"css/Vateral.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/magnific-popup.css","path":"css/magnific-popup.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/main.min.css","path":"css/main.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/nprogress.css","path":"css/nprogress.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/nprogress.min.css","path":"css/nprogress.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/templatemo_style.css","path":"css/templatemo_style.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/header.png","path":"images/header.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/LICENSE.md","path":"js/LICENSE.md","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/README.md","path":"js/README.md","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/Vateral.js","path":"js/Vateral.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/Vateral.min.js","path":"js/Vateral.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/bower.json","path":"js/bower.json","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/exif.js","path":"js/exif.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.easing.1.3.js","path":"js/jquery.easing.1.3.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.magnific-popup.min.js","path":"js/jquery.magnific-popup.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.pjax.min.js","path":"js/jquery.pjax.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.rotate.min.js","path":"js/jquery.rotate.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/modernizr.2.5.3.min.js","path":"js/modernizr.2.5.3.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/nprogress.min.js","path":"js/nprogress.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/package.json","path":"js/package.json","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/photopage.js","path":"js/photopage.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/templatemo_script.js","path":"js/templatemo_script.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/materialize.min.css","path":"css/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery-3.1.1.min.js","path":"js/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.eot","path":"fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.woff2","path":"fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.woff","path":"fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.woff","path":"fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.woff2","path":"fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.eot","path":"fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.eot","path":"fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.woff","path":"fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.woff2","path":"fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.eot","path":"fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.woff","path":"fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.woff2","path":"fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.eot","path":"fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.woff","path":"fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.woff2","path":"fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/link/all.png","path":"images/link/all.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/materialize.min.js","path":"js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.ttf","path":"fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.ttf","path":"fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.ttf","path":"fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.ttf","path":"fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.ttf","path":"fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/header-bg.png","path":"images/header-bg.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-13.png","path":"images/random/vateral-13.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-15.png","path":"images/random/vateral-15.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-16.png","path":"images/random/vateral-16.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-17.png","path":"images/random/vateral-17.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-4.png","path":"images/random/vateral-4.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-6.png","path":"images/random/vateral-6.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-10.png","path":"images/random/vateral-10.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-12.png","path":"images/random/vateral-12.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-3.png","path":"images/random/vateral-3.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-9.png","path":"images/random/vateral-9.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-11.png","path":"images/random/vateral-11.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-19.png","path":"images/random/vateral-19.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-8.png","path":"images/random/vateral-8.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/cover.png","path":"images/cover.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-1.png","path":"images/random/vateral-1.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-2.png","path":"images/random/vateral-2.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-7.png","path":"images/random/vateral-7.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-18.png","path":"images/random/vateral-18.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-5.png","path":"images/random/vateral-5.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-14.png","path":"images/random/vateral-14.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/spec/Exif2-2.pdf","path":"js/spec/Exif2-2.pdf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/moumao_hexo-theme-Vateral_ hexo主题-Vateral（a theme of hexo named as Vateral）.webarchive","path":"images/random/moumao_hexo-theme-Vateral_ hexo主题-Vateral（a theme of hexo named as Vateral）.webarchive","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Vateral/.bowerrc","hash":"5d8502d31f0ed07e935bc6faf5e7f8ce8308ab75","modified":1510374933000},{"_id":"themes/Vateral/_config.yml","hash":"15cad96adca384c79440aa37ca8991241e3da20f","modified":1510725873536},{"_id":"themes/Vateral/README.md","hash":"398bf10a0023f8aa28b73f9658af3a5efe306986","modified":1510374933000},{"_id":"themes/Vateral/bower.json","hash":"03be72b7b0ba2db4acfea95ee4cf652725737b2f","modified":1510374933000},{"_id":"themes/Vateral/package.json","hash":"ffa0ab58475ceb2efd85de6d04ea7b50b4752316","modified":1510374933000},{"_id":"source/_posts/Android与jni.md","hash":"1bf56ab9f73e13096679035767831f0251c34467","modified":1511254888779},{"_id":"source/_posts/Android开发之版本统一规范.md","hash":"22c5c136675ce9ee1de7a8aff2584cdf3d550305","modified":1511850203477},{"_id":"source/_posts/Studio下对资源进行分包.md","hash":"6e562e94d9cbbecb46da464ff948df6a131bf5e3","modified":1511847919728},{"_id":"source/_posts/android多渠道多环境配置.md","hash":"1c57a39afcfd2859502b4213008aad2d8ad61aa5","modified":1511254780039},{"_id":"source/_posts/android打包到指定目录.md","hash":"747984bcd9ac9c54e38551e9113e88dacb6f19e1","modified":1511254771560},{"_id":"source/_posts/新建文档.md","hash":"f8407874f7ed34a7803f1131983aaede0bbf8d9c","modified":1511254807577},{"_id":"source/_posts/看完这篇你学到什么：.md","hash":"9611e51fce81721074c42080e61d615929975f44","modified":1511254799975},{"_id":"themes/Vateral/layout/about.ejs","hash":"dce19d0743772b2d8624bc880394f57de18e28e2","modified":1510374933000},{"_id":"themes/Vateral/layout/archive.ejs","hash":"681e58b87971b409f41fb94b5142715731437c6d","modified":1510374933000},{"_id":"themes/Vateral/layout/category.ejs","hash":"3c627467358b91cfab881460f0ccca313c773d7c","modified":1510374933000},{"_id":"themes/Vateral/layout/friends.ejs","hash":"7e83c779ba084c8076a8fc74e082aab0efb00f2c","modified":1510374933000},{"_id":"themes/Vateral/layout/index.ejs","hash":"387a5d7991e8867b6ab97bfd87e166a7575d9d77","modified":1510374933000},{"_id":"themes/Vateral/layout/layout.ejs","hash":"ca946401fefe18b6d87392586ff44ca76f4c9bec","modified":1510374933000},{"_id":"themes/Vateral/layout/photo.ejs","hash":"e7617aa82d5a4e3ed475f2f8f1c4d12dd1434fd6","modified":1510374933000},{"_id":"themes/Vateral/layout/post.ejs","hash":"f8c9ac2b8da05eeac4bc7e200740d01988cac549","modified":1510374933000},{"_id":"themes/Vateral/layout/tag.ejs","hash":"3c93eecaf26931c03aed2dd37a66281415c6b97e","modified":1510374933000},{"_id":"themes/Vateral/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1510374933000},{"_id":"themes/Vateral/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1510374933000},{"_id":"themes/Vateral/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1510374933000},{"_id":"themes/Vateral/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1510374933000},{"_id":"themes/Vateral/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1510374933000},{"_id":"themes/Vateral/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1510374933000},{"_id":"themes/Vateral/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1510374933000},{"_id":"themes/Vateral/source/favicon.ico","hash":"b3f04351ed05e6c65ea7ea19dfed5b1839cacefc","modified":1510374933000},{"_id":"themes/Vateral/layout/partials/footer.ejs","hash":"74354d54966e3f2219ff151c6bc7779c8785d22a","modified":1510374933000},{"_id":"themes/Vateral/layout/partials/nav-left-head.ejs","hash":"f8de62a6899eb43640b11dec00a25fc0c70badd0","modified":1510374933000},{"_id":"themes/Vateral/layout/partials/nav-left-list.ejs","hash":"d33b6d0ff9cd1de2214dc8a0d210c9a0bb1911c5","modified":1510374933000},{"_id":"themes/Vateral/layout/partials/nav-left.ejs","hash":"fa2ef9a890ccaf78aa9e1b24b29308205726c1a9","modified":1510374933000},{"_id":"themes/Vateral/layout/partials/pagination.ejs","hash":"3f3681ece3b5bead885ee9272775a56166543826","modified":1510374933000},{"_id":"themes/Vateral/layout/partials/recent-posts-noup.ejs","hash":"a88381e7e0a521eeb971e7c4f9da7ec247056c03","modified":1510374933000},{"_id":"themes/Vateral/layout/partials/recent-head.ejs","hash":"ac6cb5da5f782f122ae89639b52c4f78c2dce7d8","modified":1510374933000},{"_id":"themes/Vateral/layout/partials/recent-posts.ejs","hash":"50267d572f6b824b74e7709b75a55317f5c1c211","modified":1510374933000},{"_id":"themes/Vateral/source/css/Vateral.css","hash":"4d53e0ab96388f0fc4321e4119d374c65c98889e","modified":1510374933000},{"_id":"themes/Vateral/source/css/Vateral.min.css","hash":"24f551bd5bc4426ad3c4e3c94f591360682fc93e","modified":1510374933000},{"_id":"themes/Vateral/source/css/font-awesome.min.css","hash":"c068cd49f2dd57e8162c1ad380fc63f0ec59cb1a","modified":1510374933000},{"_id":"themes/Vateral/source/css/magnific-popup.css","hash":"8158ea6f0b9851a3e574c3f531843f703b7a0ec0","modified":1510374933000},{"_id":"themes/Vateral/source/css/main.min.css","hash":"f92e49261164054d3cf0464186baf81e145be4c1","modified":1510374933000},{"_id":"themes/Vateral/source/css/nprogress.css","hash":"17ca817a091da9dcf5fe0f2f1e1f2eea60a33149","modified":1510374933000},{"_id":"themes/Vateral/source/css/nprogress.min.css","hash":"eb76839f8583abb84141cf60fd28058841740e7b","modified":1510374933000},{"_id":"themes/Vateral/source/css/templatemo_style.css","hash":"0b55b4ae7eb8c8ce5cbe0705bd3b8c95c83a1868","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1510374933000},{"_id":"themes/Vateral/source/images/header.png","hash":"910b97b5e1fd77b5a38266085e24a0abfeb08a4e","modified":1510630705861},{"_id":"themes/Vateral/source/js/LICENSE.md","hash":"8fce083aa639d11058fdd01c85190dce87560241","modified":1510374933000},{"_id":"themes/Vateral/source/js/README.md","hash":"fdbf6fee26e9bed79ad203972a3ca386e14e4361","modified":1510374933000},{"_id":"themes/Vateral/source/js/Vateral.js","hash":"064910ed67045e9b317f8c776f6ce0a68000e114","modified":1510374933000},{"_id":"themes/Vateral/source/js/Vateral.min.js","hash":"caf0283803553d1bc703321e1baebf9c2d664e38","modified":1510374933000},{"_id":"themes/Vateral/source/js/bower.json","hash":"9678ebb17f62024aa21eeae4f4c9af43492f5768","modified":1510374933000},{"_id":"themes/Vateral/source/js/exif.js","hash":"0f584529ef7ec601eaddbee27fde6edbc2e82ccc","modified":1510374933000},{"_id":"themes/Vateral/source/js/jquery.easing.1.3.js","hash":"083a2d30bc0f76cc160a8bb00646750c6ce6a260","modified":1510374933000},{"_id":"themes/Vateral/source/js/jquery.magnific-popup.min.js","hash":"9a45cea8875b8e067276f942eb8ba5d08e820cc9","modified":1510374933000},{"_id":"themes/Vateral/source/js/jquery.pjax.js","hash":"13485a1e2dc9c8df28267549de1b8af8f39061d9","modified":1510374933000},{"_id":"themes/Vateral/source/js/jquery.pjax.min.js","hash":"b0b664e2b31e4bd0d271493c55946644817611bb","modified":1510374933000},{"_id":"themes/Vateral/source/js/jquery.rotate.min.js","hash":"d1645449a3b0d85052c6055474da9d2cb49a880f","modified":1510374933000},{"_id":"themes/Vateral/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1510374933000},{"_id":"themes/Vateral/source/js/main.min.js","hash":"ad84aa92b5a2ca364fc0bd9c10fafbd61bc2de73","modified":1510374933000},{"_id":"themes/Vateral/source/js/modernizr.2.5.3.min.js","hash":"7bac5df50deb223d46964a2c980a6bfabf57767a","modified":1510374933000},{"_id":"themes/Vateral/source/js/nprogress.js","hash":"a7e1146d2021c42e68b599dc8bcc69d44fc31df3","modified":1510374933000},{"_id":"themes/Vateral/source/js/nprogress.min.js","hash":"a51a498e06f2198e9ac07de6efb45bce140d2c01","modified":1510374933000},{"_id":"themes/Vateral/source/js/package.json","hash":"59c850f26dd573f570a1363c93c7a767ddb8d578","modified":1510374933000},{"_id":"themes/Vateral/source/js/photopage.js","hash":"125860b6ece132e64199315658bd9a73d734e344","modified":1510374933000},{"_id":"themes/Vateral/source/js/templatemo_script.js","hash":"38817e0337a13a22b0f8194ddd76ce8b7e5c7967","modified":1510374933000},{"_id":"themes/Vateral/source/css/materialize.min.css","hash":"031f08da08b5e0fbde71927fb0860f08c6874989","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1510374933000},{"_id":"themes/Vateral/source/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1510374933000},{"_id":"themes/Vateral/source/images/link/all.png","hash":"4187499cc20689a582300bfcb26576252a188d5d","modified":1510374933000},{"_id":"themes/Vateral/source/js/materialize.min.js","hash":"55bbdc929aeca8fe2136a6907b5f6f2e50d6a9a1","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1510374933000},{"_id":"themes/Vateral/source/images/header-bg.png","hash":"775456ebcbd463376bd436f57cd34ea3fdbe4193","modified":1507710586757},{"_id":"themes/Vateral/source/images/random/vateral-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1510374933000},{"_id":"themes/Vateral/source/images/cover.png","hash":"587a0843a1f303e09ad891328036fd80a87b81ac","modified":1510725353397},{"_id":"themes/Vateral/source/images/random/vateral-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1510374933000},{"_id":"themes/Vateral/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/vateral-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1510374933000},{"_id":"themes/Vateral/source/js/spec/Exif2-2.pdf","hash":"9ecf2bc7ebab6ef1916839d9778804945173ee39","modified":1510374933000},{"_id":"themes/Vateral/source/images/random/moumao_hexo-theme-Vateral_ hexo主题-Vateral（a theme of hexo named as Vateral）.webarchive","hash":"16c2ed57bca5fd4bf075e13686d72171627922b7","modified":1510374933000},{"_id":"public/2017/11/17/看完这篇你学到什么：/index.html","hash":"7e8f9dfd2efaf2f84527c655aaf7c11a7653aec8","modified":1511851026217},{"_id":"public/2017/11/15/新建文档/index.html","hash":"12d179ae2d5bb20b2d264753e12948ce084b6b27","modified":1511851026225},{"_id":"public/2017/11/17/android打包到指定目录/index.html","hash":"dbd9322e431d9858b17c3e9720253934ff1b8774","modified":1511850502371},{"_id":"public/archives/index.html","hash":"94e0f1aa4fa724ecf80c25fec250e5b4b429ee16","modified":1511850502371},{"_id":"public/archives/2017/index.html","hash":"c03618610fa1ee37ef659c75b1d1fd16505f6403","modified":1511851026226},{"_id":"public/archives/2017/11/index.html","hash":"1a79d3072400e8056f3efdcb95af689e9accaa99","modified":1511851026226},{"_id":"public/categories/Android/index.html","hash":"a1d67dfb9632ed6d2f2ed4587d21a66abb259046","modified":1511851026226},{"_id":"public/tags/Android/index.html","hash":"f6f96202ca47cfebc904d0068a9850dad4c1a0bd","modified":1511850502371},{"_id":"public/2017/11/21/Android与jni/index.html","hash":"87cba0e75b6c7b8ad490ee2dbfaa30acff9deb40","modified":1511850502371},{"_id":"public/index.html","hash":"c5f87b1b511153d99dda5143200f8f3adbb5ec53","modified":1511851026226},{"_id":"public/2017/11/17/android多渠道多环境配置/index.html","hash":"f4b1ba8f7c71def7a2247e2792719c5e7fe18974","modified":1511850502371},{"_id":"public/2017/11/28/Android开发之版本统一规范/index.html","hash":"70bd7a9145f5827b3bf1faae8bf50156bf9293f9","modified":1511851026226},{"_id":"public/2017/11/28/Studio下对资源进行分包/index.html","hash":"08c7e782cddccd10a3a658f268481baf3f27c991","modified":1511851026226},{"_id":"source/_posts/2018必须做好规划.md","hash":"f46c57c675113e8de504e22109be781f237cdc37","modified":1515461679633}],"Category":[{"name":"Android","_id":"cjaj8l0610002z8qbbg8l6yb0"}],"Data":[],"Page":[],"Post":[{"title":"Android与jni","date":"2017-11-21T08:55:26.000Z","thumbnail":"http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg","_content":"\n创建工程选择引入ndk，再加入构建模块\n![这里写图片描述](http://img.blog.csdn.net/20171119105730824?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n程序跑出来就有一个默认的调用c的方法，\n下面是一个完整的c的方法\n```\nextern \"C\"\nJNIEXPORT jstring\n\nJNICALL\nJava_com_example_administrator_testnative_MainActivity_stringFromJNI(\n//        JNIEnv 类型代表了Java环境。通这个JNIEnv指针，就可以对Java断的代码进行操作，例如，创建Java类的对象\n//        调用Java对象的方法，获取Java对象的属性等等，JNIEnv的指针会被jni传入到本地方法的实现函数中来对Java断的代码进行操作\n        JNIEnv *env,\n//        如果在Java中不是静态方法，该方法对应的类的实例；如果是静态方法传入的是该类的.class对象\n        jobject /* this */) {\n    std::string hello = \"Hello from C++\";\n    return env->NewStringUTF(hello.c_str());\n}\n```\nJNIEnv中提供的方法\n\n![JNIEnv中提供的方法](http://img.blog.csdn.net/20171119110105519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nJava中类型在c中的对应关系\n\n![这里写图片描述](http://img.blog.csdn.net/20171119110347704?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在jni中获取jclass类\n\n![这里写图片描述](http://img.blog.csdn.net/20171119110713660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在jni中访问Java的方法与属性\n\n![这里写图片描述](http://img.blog.csdn.net/20171119110836628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n示例：\n\n```\nextern \"C\"\nJNIEXPORT void\n\nJNICALL\nJava_com_example_administrator_testnative_MainActivity_test(\n        JNIEnv *env,\n        jobject obj) {\n    // 得到jclass对象\n    jclass mainActivity = env->GetObjectClass(obj);\n    // 得到方法的id\n    jmethodID id = env->GetMethodID(mainActivity,\"jniCall\",\"(I)I\");\n    // 调用方法\n    env->CallIntMethod(obj,id,100L);\n}\n```\n\n在上面用到了签名，签名是对应的方法的参数和返回值类型设置的，上面的示例中`\"(I)I\"`对应的是有int类型的参数返回值为`int`类型如果有多个类型`\"(int i, boolean b,String s,int j)\"`对应的是`\"\"(IZLjava/lang/String;I)`，如果没有返回值没有参数`\"()V\"`或`\"()V\"`\n![这里写图片描述](http://img.blog.csdn.net/20171119143318902?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在jdk中提供了javap工具签名\n![这里写图片描述](http://img.blog.csdn.net/20171119111838555?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20171119112925088?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n为了方便调试在jni中打印安卓日志\n```\n#include  <android/log.h>\n#define  TAG    \"HHH\"   // 这是安卓的Tag  ANDROID_LOG_ERROR是日志级别 \n#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG,__VA_ARGS__)\n\n    // 将java字符串转换成c字符串后再打印\n    const char * str =  env->GetStringUTFChars(javaString,NULL);\n\n    LOGE(\"%s\",str);\n```\n\n### JNI中获取到java的字符串\n```\n// 在java中传入字符串到jni然后再返回java\nextern \"C\"\nJNIEXPORT\n\njstring\nJNICALL\nJava_com_example_administrator_testnative_MainActivity_callJniMethod(\n        JNIEnv *env,\n        jobject,jstring javaString){\n\n    // 将java字符串转换成c字符串\n    const char * str =  env->GetStringUTFChars(javaString,NULL);\n\n    jstring javaStr = env->NewStringUTF(str);\n    return javaStr;\n}\n```\n\njni数组操作\n\n```\n\t// 在jni中创建数组\n    // 定义c数组\n    jint nativeArr[3] = {21,22,23};\n    // 定义java数组，可以返回给java使用的数组\n    jintArray javaArray = env->NewIntArray(3);\n    // 将c数组的内容复制给java\n    env->SetIntArrayRegion(javaArray,0,3,nativeArr);\n\n\n// 复制数组再操作 在java中传入一个数组在c中计算完成后返回值\nextern \"C\"\nJNIEXPORT jint JNICALL\nJava_com_example_administrator_testnative_MainActivity_getSum(\n        JNIEnv *env,\n        jobject obj,\n        jintArray javaArr) {\n\n    // 得到数组的长度\n    jsize len = env->GetArrayLength(javaArr);\n    // 定义一个数组\n    jint cArr[len];\n    // 将java数组复制到c中\n    env->GetIntArrayRegion(javaArr,0,len,cArr);\n    jint sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum +=cArr[i];\n    }\n    return sum;\n}\n\n\n// 第二种中对直接指针的操作\n// 在java中传入一个数组在c中计算完成后返回值\nextern \"C\"\nJNIEXPORT jint JNICALL\nJava_com_example_administrator_testnative_MainActivity_getSum(\n        JNIEnv *env,\n        jobject obj,\n        jintArray javaArr) {\n\n    jint result = 1;\n    jsize length = env->GetArrayLength(javaArr);\n    // 等到c数组的int指针\n    jint* nativeDirectArray = env->GetIntArrayElements(javaArr,NULL);\n    for(int i=0;i<length;i++){\n        result += nativeDirectArray[i];\n//        nativeDirectArray[i] = i;\n    }\n\n    // 排序\n    std::sort(nativeDirectArray,nativeDirectArray+length);\n\n    // 0：将内容复制回来并释放原生数组 在c中改变数组，java中也会改变\n    // JNI_COMMIT：将内容复制回来但是不释放原生数组，一般用于周期性的更新一个Java数组。\n    // JNI_ABORT释放原生数组但是不将内容复制回来。\n    env->ReleaseIntArrayElements(javaArr,nativeDirectArray,0);\n    return result;\n}\n```\n### 在c中全局引用、局部引用、弱引用\n>从java虚拟机创建的对象传到本地c代码是会产生引用。根据java的垃圾回收机制，只要有引用存在就不会触发该引用指向的java对象的垃圾回收。\n>这些引用在jni中分三种\n\t>全局引用（GlobalReference）\n\t局部引用（LocalReference）\n\t弱全局引用（WeakGlobalReference）\n\t\n![这里写图片描述](http://img.blog.csdn.net/20171119215243084?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20171119215350192?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20171119215442316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n由于jfielId和jmethodId在创建时会消耗，所以可以缓存起来\n第一种在方法内使用static，在多次调用该方法时只会创建一次id\n```\n    static jmethodID initId;\n    if (initId==NULL) {\n        initId= env->GetMethodID(dateClass,\"<init>\",\"()V\");\n    }\n```\n第二种使用全局变量存储,在任何native函数调用之前初始化\n```\n// 全局变量\njfieldID gId=0;\n\nextern \"C\"\nJNIEXPORT void JNICALL Java_com_example_administrator_testnative_MainActivity_init(\n        JNIEnv* env,\n        jobject obj) {\n    jclass cl = env->GetObjectClass(obj);\n    gId = env->GetFieldID(cl,\"age\",\"I\");\n}\n```\n","source":"_posts/Android与jni.md","raw":"---\ntitle: Android与jni\ndate: 2017-11-21 16:55:26\ntags: Android\ncategories: Android\nthumbnail: http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg\n---\n\n创建工程选择引入ndk，再加入构建模块\n![这里写图片描述](http://img.blog.csdn.net/20171119105730824?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n程序跑出来就有一个默认的调用c的方法，\n下面是一个完整的c的方法\n```\nextern \"C\"\nJNIEXPORT jstring\n\nJNICALL\nJava_com_example_administrator_testnative_MainActivity_stringFromJNI(\n//        JNIEnv 类型代表了Java环境。通这个JNIEnv指针，就可以对Java断的代码进行操作，例如，创建Java类的对象\n//        调用Java对象的方法，获取Java对象的属性等等，JNIEnv的指针会被jni传入到本地方法的实现函数中来对Java断的代码进行操作\n        JNIEnv *env,\n//        如果在Java中不是静态方法，该方法对应的类的实例；如果是静态方法传入的是该类的.class对象\n        jobject /* this */) {\n    std::string hello = \"Hello from C++\";\n    return env->NewStringUTF(hello.c_str());\n}\n```\nJNIEnv中提供的方法\n\n![JNIEnv中提供的方法](http://img.blog.csdn.net/20171119110105519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nJava中类型在c中的对应关系\n\n![这里写图片描述](http://img.blog.csdn.net/20171119110347704?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在jni中获取jclass类\n\n![这里写图片描述](http://img.blog.csdn.net/20171119110713660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在jni中访问Java的方法与属性\n\n![这里写图片描述](http://img.blog.csdn.net/20171119110836628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n示例：\n\n```\nextern \"C\"\nJNIEXPORT void\n\nJNICALL\nJava_com_example_administrator_testnative_MainActivity_test(\n        JNIEnv *env,\n        jobject obj) {\n    // 得到jclass对象\n    jclass mainActivity = env->GetObjectClass(obj);\n    // 得到方法的id\n    jmethodID id = env->GetMethodID(mainActivity,\"jniCall\",\"(I)I\");\n    // 调用方法\n    env->CallIntMethod(obj,id,100L);\n}\n```\n\n在上面用到了签名，签名是对应的方法的参数和返回值类型设置的，上面的示例中`\"(I)I\"`对应的是有int类型的参数返回值为`int`类型如果有多个类型`\"(int i, boolean b,String s,int j)\"`对应的是`\"\"(IZLjava/lang/String;I)`，如果没有返回值没有参数`\"()V\"`或`\"()V\"`\n![这里写图片描述](http://img.blog.csdn.net/20171119143318902?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在jdk中提供了javap工具签名\n![这里写图片描述](http://img.blog.csdn.net/20171119111838555?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20171119112925088?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n为了方便调试在jni中打印安卓日志\n```\n#include  <android/log.h>\n#define  TAG    \"HHH\"   // 这是安卓的Tag  ANDROID_LOG_ERROR是日志级别 \n#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG,__VA_ARGS__)\n\n    // 将java字符串转换成c字符串后再打印\n    const char * str =  env->GetStringUTFChars(javaString,NULL);\n\n    LOGE(\"%s\",str);\n```\n\n### JNI中获取到java的字符串\n```\n// 在java中传入字符串到jni然后再返回java\nextern \"C\"\nJNIEXPORT\n\njstring\nJNICALL\nJava_com_example_administrator_testnative_MainActivity_callJniMethod(\n        JNIEnv *env,\n        jobject,jstring javaString){\n\n    // 将java字符串转换成c字符串\n    const char * str =  env->GetStringUTFChars(javaString,NULL);\n\n    jstring javaStr = env->NewStringUTF(str);\n    return javaStr;\n}\n```\n\njni数组操作\n\n```\n\t// 在jni中创建数组\n    // 定义c数组\n    jint nativeArr[3] = {21,22,23};\n    // 定义java数组，可以返回给java使用的数组\n    jintArray javaArray = env->NewIntArray(3);\n    // 将c数组的内容复制给java\n    env->SetIntArrayRegion(javaArray,0,3,nativeArr);\n\n\n// 复制数组再操作 在java中传入一个数组在c中计算完成后返回值\nextern \"C\"\nJNIEXPORT jint JNICALL\nJava_com_example_administrator_testnative_MainActivity_getSum(\n        JNIEnv *env,\n        jobject obj,\n        jintArray javaArr) {\n\n    // 得到数组的长度\n    jsize len = env->GetArrayLength(javaArr);\n    // 定义一个数组\n    jint cArr[len];\n    // 将java数组复制到c中\n    env->GetIntArrayRegion(javaArr,0,len,cArr);\n    jint sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum +=cArr[i];\n    }\n    return sum;\n}\n\n\n// 第二种中对直接指针的操作\n// 在java中传入一个数组在c中计算完成后返回值\nextern \"C\"\nJNIEXPORT jint JNICALL\nJava_com_example_administrator_testnative_MainActivity_getSum(\n        JNIEnv *env,\n        jobject obj,\n        jintArray javaArr) {\n\n    jint result = 1;\n    jsize length = env->GetArrayLength(javaArr);\n    // 等到c数组的int指针\n    jint* nativeDirectArray = env->GetIntArrayElements(javaArr,NULL);\n    for(int i=0;i<length;i++){\n        result += nativeDirectArray[i];\n//        nativeDirectArray[i] = i;\n    }\n\n    // 排序\n    std::sort(nativeDirectArray,nativeDirectArray+length);\n\n    // 0：将内容复制回来并释放原生数组 在c中改变数组，java中也会改变\n    // JNI_COMMIT：将内容复制回来但是不释放原生数组，一般用于周期性的更新一个Java数组。\n    // JNI_ABORT释放原生数组但是不将内容复制回来。\n    env->ReleaseIntArrayElements(javaArr,nativeDirectArray,0);\n    return result;\n}\n```\n### 在c中全局引用、局部引用、弱引用\n>从java虚拟机创建的对象传到本地c代码是会产生引用。根据java的垃圾回收机制，只要有引用存在就不会触发该引用指向的java对象的垃圾回收。\n>这些引用在jni中分三种\n\t>全局引用（GlobalReference）\n\t局部引用（LocalReference）\n\t弱全局引用（WeakGlobalReference）\n\t\n![这里写图片描述](http://img.blog.csdn.net/20171119215243084?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20171119215350192?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20171119215442316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n由于jfielId和jmethodId在创建时会消耗，所以可以缓存起来\n第一种在方法内使用static，在多次调用该方法时只会创建一次id\n```\n    static jmethodID initId;\n    if (initId==NULL) {\n        initId= env->GetMethodID(dateClass,\"<init>\",\"()V\");\n    }\n```\n第二种使用全局变量存储,在任何native函数调用之前初始化\n```\n// 全局变量\njfieldID gId=0;\n\nextern \"C\"\nJNIEXPORT void JNICALL Java_com_example_administrator_testnative_MainActivity_init(\n        JNIEnv* env,\n        jobject obj) {\n    jclass cl = env->GetObjectClass(obj);\n    gId = env->GetFieldID(cl,\"age\",\"I\");\n}\n```\n","slug":"Android与jni","published":1,"updated":"2017-11-21T09:01:28.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaj8l05f0000z8qbvvbnodyy","content":"<p>创建工程选择引入ndk，再加入构建模块<br><img src=\"http://img.blog.csdn.net/20171119105730824?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>程序跑出来就有一个默认的调用c的方法，<br>下面是一个完整的c的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT jstring</span><br><span class=\"line\"></span><br><span class=\"line\">JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_stringFromJNI(</span><br><span class=\"line\">//        JNIEnv 类型代表了Java环境。通这个JNIEnv指针，就可以对Java断的代码进行操作，例如，创建Java类的对象</span><br><span class=\"line\">//        调用Java对象的方法，获取Java对象的属性等等，JNIEnv的指针会被jni传入到本地方法的实现函数中来对Java断的代码进行操作</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">//        如果在Java中不是静态方法，该方法对应的类的实例；如果是静态方法传入的是该类的.class对象</span><br><span class=\"line\">        jobject /* this */) &#123;</span><br><span class=\"line\">    std::string hello = &quot;Hello from C++&quot;;</span><br><span class=\"line\">    return env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>JNIEnv中提供的方法</p>\n<p><img src=\"http://img.blog.csdn.net/20171119110105519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"JNIEnv中提供的方法\"></p>\n<p>Java中类型在c中的对应关系</p>\n<p><img src=\"http://img.blog.csdn.net/20171119110347704?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>在jni中获取jclass类</p>\n<p><img src=\"http://img.blog.csdn.net/20171119110713660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>在jni中访问Java的方法与属性</p>\n<p><img src=\"http://img.blog.csdn.net/20171119110836628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT void</span><br><span class=\"line\"></span><br><span class=\"line\">JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_test(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject obj) &#123;</span><br><span class=\"line\">    // 得到jclass对象</span><br><span class=\"line\">    jclass mainActivity = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\">    // 得到方法的id</span><br><span class=\"line\">    jmethodID id = env-&gt;GetMethodID(mainActivity,&quot;jniCall&quot;,&quot;(I)I&quot;);</span><br><span class=\"line\">    // 调用方法</span><br><span class=\"line\">    env-&gt;CallIntMethod(obj,id,100L);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面用到了签名，签名是对应的方法的参数和返回值类型设置的，上面的示例中<code>&quot;(I)I&quot;</code>对应的是有int类型的参数返回值为<code>int</code>类型如果有多个类型<code>&quot;(int i, boolean b,String s,int j)&quot;</code>对应的是<code>&quot;&quot;(IZLjava/lang/String;I)</code>，如果没有返回值没有参数<code>&quot;()V&quot;</code>或<code>&quot;()V&quot;</code><br><img src=\"http://img.blog.csdn.net/20171119143318902?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>在jdk中提供了javap工具签名<br><img src=\"http://img.blog.csdn.net/20171119111838555?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20171119112925088?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>为了方便调试在jni中打印安卓日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include  &lt;android/log.h&gt;</span><br><span class=\"line\">#define  TAG    &quot;HHH&quot;   // 这是安卓的Tag  ANDROID_LOG_ERROR是日志级别 </span><br><span class=\"line\">#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG,__VA_ARGS__)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将java字符串转换成c字符串后再打印</span><br><span class=\"line\">    const char * str =  env-&gt;GetStringUTFChars(javaString,NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    LOGE(&quot;%s&quot;,str);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JNI中获取到java的字符串\"><a href=\"#JNI中获取到java的字符串\" class=\"headerlink\" title=\"JNI中获取到java的字符串\"></a>JNI中获取到java的字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在java中传入字符串到jni然后再返回java</span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT</span><br><span class=\"line\"></span><br><span class=\"line\">jstring</span><br><span class=\"line\">JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_callJniMethod(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject,jstring javaString)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将java字符串转换成c字符串</span><br><span class=\"line\">    const char * str =  env-&gt;GetStringUTFChars(javaString,NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    jstring javaStr = env-&gt;NewStringUTF(str);</span><br><span class=\"line\">    return javaStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jni数组操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t// 在jni中创建数组</span><br><span class=\"line\">    // 定义c数组</span><br><span class=\"line\">    jint nativeArr[3] = &#123;21,22,23&#125;;</span><br><span class=\"line\">    // 定义java数组，可以返回给java使用的数组</span><br><span class=\"line\">    jintArray javaArray = env-&gt;NewIntArray(3);</span><br><span class=\"line\">    // 将c数组的内容复制给java</span><br><span class=\"line\">    env-&gt;SetIntArrayRegion(javaArray,0,3,nativeArr);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 复制数组再操作 在java中传入一个数组在c中计算完成后返回值</span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT jint JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_getSum(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject obj,</span><br><span class=\"line\">        jintArray javaArr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 得到数组的长度</span><br><span class=\"line\">    jsize len = env-&gt;GetArrayLength(javaArr);</span><br><span class=\"line\">    // 定义一个数组</span><br><span class=\"line\">    jint cArr[len];</span><br><span class=\"line\">    // 将java数组复制到c中</span><br><span class=\"line\">    env-&gt;GetIntArrayRegion(javaArr,0,len,cArr);</span><br><span class=\"line\">    jint sum = 0;</span><br><span class=\"line\">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        sum +=cArr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种中对直接指针的操作</span><br><span class=\"line\">// 在java中传入一个数组在c中计算完成后返回值</span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT jint JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_getSum(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject obj,</span><br><span class=\"line\">        jintArray javaArr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    jint result = 1;</span><br><span class=\"line\">    jsize length = env-&gt;GetArrayLength(javaArr);</span><br><span class=\"line\">    // 等到c数组的int指针</span><br><span class=\"line\">    jint* nativeDirectArray = env-&gt;GetIntArrayElements(javaArr,NULL);</span><br><span class=\"line\">    for(int i=0;i&lt;length;i++)&#123;</span><br><span class=\"line\">        result += nativeDirectArray[i];</span><br><span class=\"line\">//        nativeDirectArray[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 排序</span><br><span class=\"line\">    std::sort(nativeDirectArray,nativeDirectArray+length);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 0：将内容复制回来并释放原生数组 在c中改变数组，java中也会改变</span><br><span class=\"line\">    // JNI_COMMIT：将内容复制回来但是不释放原生数组，一般用于周期性的更新一个Java数组。</span><br><span class=\"line\">    // JNI_ABORT释放原生数组但是不将内容复制回来。</span><br><span class=\"line\">    env-&gt;ReleaseIntArrayElements(javaArr,nativeDirectArray,0);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在c中全局引用、局部引用、弱引用\"><a href=\"#在c中全局引用、局部引用、弱引用\" class=\"headerlink\" title=\"在c中全局引用、局部引用、弱引用\"></a>在c中全局引用、局部引用、弱引用</h3><blockquote>\n<p>从java虚拟机创建的对象传到本地c代码是会产生引用。根据java的垃圾回收机制，只要有引用存在就不会触发该引用指向的java对象的垃圾回收。<br>这些引用在jni中分三种<br>全局引用（GlobalReference）<br>    局部引用（LocalReference）<br>    弱全局引用（WeakGlobalReference）</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20171119215243084?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20171119215350192?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20171119215442316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>由于jfielId和jmethodId在创建时会消耗，所以可以缓存起来<br>第一种在方法内使用static，在多次调用该方法时只会创建一次id<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static jmethodID initId;</span><br><span class=\"line\">if (initId==NULL) &#123;</span><br><span class=\"line\">    initId= env-&gt;GetMethodID(dateClass,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种使用全局变量存储,在任何native函数调用之前初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局变量</span><br><span class=\"line\">jfieldID gId=0;</span><br><span class=\"line\"></span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT void JNICALL Java_com_example_administrator_testnative_MainActivity_init(</span><br><span class=\"line\">        JNIEnv* env,</span><br><span class=\"line\">        jobject obj) &#123;</span><br><span class=\"line\">    jclass cl = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\">    gId = env-&gt;GetFieldID(cl,&quot;age&quot;,&quot;I&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>创建工程选择引入ndk，再加入构建模块<br><img src=\"http://img.blog.csdn.net/20171119105730824?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>程序跑出来就有一个默认的调用c的方法，<br>下面是一个完整的c的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT jstring</span><br><span class=\"line\"></span><br><span class=\"line\">JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_stringFromJNI(</span><br><span class=\"line\">//        JNIEnv 类型代表了Java环境。通这个JNIEnv指针，就可以对Java断的代码进行操作，例如，创建Java类的对象</span><br><span class=\"line\">//        调用Java对象的方法，获取Java对象的属性等等，JNIEnv的指针会被jni传入到本地方法的实现函数中来对Java断的代码进行操作</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">//        如果在Java中不是静态方法，该方法对应的类的实例；如果是静态方法传入的是该类的.class对象</span><br><span class=\"line\">        jobject /* this */) &#123;</span><br><span class=\"line\">    std::string hello = &quot;Hello from C++&quot;;</span><br><span class=\"line\">    return env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>JNIEnv中提供的方法</p>\n<p><img src=\"http://img.blog.csdn.net/20171119110105519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"JNIEnv中提供的方法\"></p>\n<p>Java中类型在c中的对应关系</p>\n<p><img src=\"http://img.blog.csdn.net/20171119110347704?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>在jni中获取jclass类</p>\n<p><img src=\"http://img.blog.csdn.net/20171119110713660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>在jni中访问Java的方法与属性</p>\n<p><img src=\"http://img.blog.csdn.net/20171119110836628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT void</span><br><span class=\"line\"></span><br><span class=\"line\">JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_test(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject obj) &#123;</span><br><span class=\"line\">    // 得到jclass对象</span><br><span class=\"line\">    jclass mainActivity = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\">    // 得到方法的id</span><br><span class=\"line\">    jmethodID id = env-&gt;GetMethodID(mainActivity,&quot;jniCall&quot;,&quot;(I)I&quot;);</span><br><span class=\"line\">    // 调用方法</span><br><span class=\"line\">    env-&gt;CallIntMethod(obj,id,100L);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面用到了签名，签名是对应的方法的参数和返回值类型设置的，上面的示例中<code>&quot;(I)I&quot;</code>对应的是有int类型的参数返回值为<code>int</code>类型如果有多个类型<code>&quot;(int i, boolean b,String s,int j)&quot;</code>对应的是<code>&quot;&quot;(IZLjava/lang/String;I)</code>，如果没有返回值没有参数<code>&quot;()V&quot;</code>或<code>&quot;()V&quot;</code><br><img src=\"http://img.blog.csdn.net/20171119143318902?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>在jdk中提供了javap工具签名<br><img src=\"http://img.blog.csdn.net/20171119111838555?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20171119112925088?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>为了方便调试在jni中打印安卓日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include  &lt;android/log.h&gt;</span><br><span class=\"line\">#define  TAG    &quot;HHH&quot;   // 这是安卓的Tag  ANDROID_LOG_ERROR是日志级别 </span><br><span class=\"line\">#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG,__VA_ARGS__)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将java字符串转换成c字符串后再打印</span><br><span class=\"line\">    const char * str =  env-&gt;GetStringUTFChars(javaString,NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    LOGE(&quot;%s&quot;,str);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JNI中获取到java的字符串\"><a href=\"#JNI中获取到java的字符串\" class=\"headerlink\" title=\"JNI中获取到java的字符串\"></a>JNI中获取到java的字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在java中传入字符串到jni然后再返回java</span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT</span><br><span class=\"line\"></span><br><span class=\"line\">jstring</span><br><span class=\"line\">JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_callJniMethod(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject,jstring javaString)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将java字符串转换成c字符串</span><br><span class=\"line\">    const char * str =  env-&gt;GetStringUTFChars(javaString,NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    jstring javaStr = env-&gt;NewStringUTF(str);</span><br><span class=\"line\">    return javaStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jni数组操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t// 在jni中创建数组</span><br><span class=\"line\">    // 定义c数组</span><br><span class=\"line\">    jint nativeArr[3] = &#123;21,22,23&#125;;</span><br><span class=\"line\">    // 定义java数组，可以返回给java使用的数组</span><br><span class=\"line\">    jintArray javaArray = env-&gt;NewIntArray(3);</span><br><span class=\"line\">    // 将c数组的内容复制给java</span><br><span class=\"line\">    env-&gt;SetIntArrayRegion(javaArray,0,3,nativeArr);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 复制数组再操作 在java中传入一个数组在c中计算完成后返回值</span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT jint JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_getSum(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject obj,</span><br><span class=\"line\">        jintArray javaArr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 得到数组的长度</span><br><span class=\"line\">    jsize len = env-&gt;GetArrayLength(javaArr);</span><br><span class=\"line\">    // 定义一个数组</span><br><span class=\"line\">    jint cArr[len];</span><br><span class=\"line\">    // 将java数组复制到c中</span><br><span class=\"line\">    env-&gt;GetIntArrayRegion(javaArr,0,len,cArr);</span><br><span class=\"line\">    jint sum = 0;</span><br><span class=\"line\">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        sum +=cArr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种中对直接指针的操作</span><br><span class=\"line\">// 在java中传入一个数组在c中计算完成后返回值</span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT jint JNICALL</span><br><span class=\"line\">Java_com_example_administrator_testnative_MainActivity_getSum(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject obj,</span><br><span class=\"line\">        jintArray javaArr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    jint result = 1;</span><br><span class=\"line\">    jsize length = env-&gt;GetArrayLength(javaArr);</span><br><span class=\"line\">    // 等到c数组的int指针</span><br><span class=\"line\">    jint* nativeDirectArray = env-&gt;GetIntArrayElements(javaArr,NULL);</span><br><span class=\"line\">    for(int i=0;i&lt;length;i++)&#123;</span><br><span class=\"line\">        result += nativeDirectArray[i];</span><br><span class=\"line\">//        nativeDirectArray[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 排序</span><br><span class=\"line\">    std::sort(nativeDirectArray,nativeDirectArray+length);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 0：将内容复制回来并释放原生数组 在c中改变数组，java中也会改变</span><br><span class=\"line\">    // JNI_COMMIT：将内容复制回来但是不释放原生数组，一般用于周期性的更新一个Java数组。</span><br><span class=\"line\">    // JNI_ABORT释放原生数组但是不将内容复制回来。</span><br><span class=\"line\">    env-&gt;ReleaseIntArrayElements(javaArr,nativeDirectArray,0);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在c中全局引用、局部引用、弱引用\"><a href=\"#在c中全局引用、局部引用、弱引用\" class=\"headerlink\" title=\"在c中全局引用、局部引用、弱引用\"></a>在c中全局引用、局部引用、弱引用</h3><blockquote>\n<p>从java虚拟机创建的对象传到本地c代码是会产生引用。根据java的垃圾回收机制，只要有引用存在就不会触发该引用指向的java对象的垃圾回收。<br>这些引用在jni中分三种<br>全局引用（GlobalReference）<br>    局部引用（LocalReference）<br>    弱全局引用（WeakGlobalReference）</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20171119215243084?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20171119215350192?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20171119215442316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>由于jfielId和jmethodId在创建时会消耗，所以可以缓存起来<br>第一种在方法内使用static，在多次调用该方法时只会创建一次id<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static jmethodID initId;</span><br><span class=\"line\">if (initId==NULL) &#123;</span><br><span class=\"line\">    initId= env-&gt;GetMethodID(dateClass,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种使用全局变量存储,在任何native函数调用之前初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局变量</span><br><span class=\"line\">jfieldID gId=0;</span><br><span class=\"line\"></span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">JNIEXPORT void JNICALL Java_com_example_administrator_testnative_MainActivity_init(</span><br><span class=\"line\">        JNIEnv* env,</span><br><span class=\"line\">        jobject obj) &#123;</span><br><span class=\"line\">    jclass cl = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\">    gId = env-&gt;GetFieldID(cl,&quot;age&quot;,&quot;I&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Android开发之版本统一规范","date":"2017-11-28T06:22:22.000Z","thumbnail":"http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg","_content":"项目做久了后来发现又有更新了，贼麻烦，今天有空记录一下统一资源版本管理\n看图 ：）\n\n在project的build.gradle文件中添加版本号\n\n![这里写图片描述](http://img.blog.csdn.net/20171128142628609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在使用的时候就非常方便了\n\n![这里写图片描述](http://img.blog.csdn.net/20171128142810747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n注意！在添加依赖时将`''`改成`\"\"`","source":"_posts/Android开发之版本统一规范.md","raw":"---\ntitle: Android开发之版本统一规范\ndate: 2017-11-28 14:22:22\ntags: Android\ncategories: Android\nthumbnail: http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg\n---\n项目做久了后来发现又有更新了，贼麻烦，今天有空记录一下统一资源版本管理\n看图 ：）\n\n在project的build.gradle文件中添加版本号\n\n![这里写图片描述](http://img.blog.csdn.net/20171128142628609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在使用的时候就非常方便了\n\n![这里写图片描述](http://img.blog.csdn.net/20171128142810747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n注意！在添加依赖时将`''`改成`\"\"`","slug":"Android开发之版本统一规范","published":1,"updated":"2017-11-28T06:23:23.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaj8l05p0001z8qb86xzu7yw","content":"<p>项目做久了后来发现又有更新了，贼麻烦，今天有空记录一下统一资源版本管理<br>看图 ：）</p>\n<p>在project的build.gradle文件中添加版本号</p>\n<p><img src=\"http://img.blog.csdn.net/20171128142628609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>在使用的时候就非常方便了</p>\n<p><img src=\"http://img.blog.csdn.net/20171128142810747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>注意！在添加依赖时将<code>&#39;&#39;</code>改成<code>&quot;&quot;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>项目做久了后来发现又有更新了，贼麻烦，今天有空记录一下统一资源版本管理<br>看图 ：）</p>\n<p>在project的build.gradle文件中添加版本号</p>\n<p><img src=\"http://img.blog.csdn.net/20171128142628609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>在使用的时候就非常方便了</p>\n<p><img src=\"http://img.blog.csdn.net/20171128142810747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>注意！在添加依赖时将<code>&#39;&#39;</code>改成<code>&quot;&quot;</code></p>\n"},{"layout":"android","title":"Studio下对资源进行分包","date":"2017-11-28T05:44:06.000Z","thumbnail":"http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg","_content":"在项目做大后资源文件不好管理，怎么办呢？今天记录一下资源文件分包 : )\n如下\n\n![这里写图片描述](http://img.blog.csdn.net/20171128134654604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n是不是发现activity目录有标记了\n再来看看具体配置吧\n```\nandroid {\n    compileSdkVersion 25\n    buildToolsVersion '25.0.0'\n    aaptOptions.cruncherEnabled = false\n    aaptOptions.useNewCruncher = false\n   \n\t...\n\t\n\t sourceSets {\n        main {\n            res.srcDirs = [\n                    'src/main/res',\n                    'src/main/res/layouts',\n                    'src/main/res/layouts/activity',\n                    'src/main/res/layouts/adapteritem',\n                    'src/main/res/layouts/base',\n                    'src/main/res/layouts/fragment',\n                    'src/main/res/layouts/view'\n            ]\n        }\n}\n```\n\n注意，将目录创建好后同步一下，工程要开到project模式才可见 ：)","source":"_posts/Studio下对资源进行分包.md","raw":"---\nlayout: android\ntitle: Studio下对资源进行分包\ndate: 2017-11-28 13:44:06\ntags: Android\ncategories: Android\nthumbnail: http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg\n---\n在项目做大后资源文件不好管理，怎么办呢？今天记录一下资源文件分包 : )\n如下\n\n![这里写图片描述](http://img.blog.csdn.net/20171128134654604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n是不是发现activity目录有标记了\n再来看看具体配置吧\n```\nandroid {\n    compileSdkVersion 25\n    buildToolsVersion '25.0.0'\n    aaptOptions.cruncherEnabled = false\n    aaptOptions.useNewCruncher = false\n   \n\t...\n\t\n\t sourceSets {\n        main {\n            res.srcDirs = [\n                    'src/main/res',\n                    'src/main/res/layouts',\n                    'src/main/res/layouts/activity',\n                    'src/main/res/layouts/adapteritem',\n                    'src/main/res/layouts/base',\n                    'src/main/res/layouts/fragment',\n                    'src/main/res/layouts/view'\n            ]\n        }\n}\n```\n\n注意，将目录创建好后同步一下，工程要开到project模式才可见 ：)","slug":"Studio下对资源进行分包","published":1,"updated":"2017-11-28T05:45:19.728Z","comments":1,"photos":[],"link":"","_id":"cjaj8l0660004z8qba1x8erh1","content":"<p>在项目做大后资源文件不好管理，怎么办呢？今天记录一下资源文件分包 : )<br>如下</p>\n<p><img src=\"http://img.blog.csdn.net/20171128134654604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>是不是发现activity目录有标记了<br>再来看看具体配置吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 25</span><br><span class=\"line\">    buildToolsVersion &apos;25.0.0&apos;</span><br><span class=\"line\">    aaptOptions.cruncherEnabled = false</span><br><span class=\"line\">    aaptOptions.useNewCruncher = false</span><br><span class=\"line\">   </span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t sourceSets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            res.srcDirs = [</span><br><span class=\"line\">                    &apos;src/main/res&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/activity&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/adapteritem&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/base&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/fragment&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/view&apos;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意，将目录创建好后同步一下，工程要开到project模式才可见 ：)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目做大后资源文件不好管理，怎么办呢？今天记录一下资源文件分包 : )<br>如下</p>\n<p><img src=\"http://img.blog.csdn.net/20171128134654604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlnX3NlYV9t/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>是不是发现activity目录有标记了<br>再来看看具体配置吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 25</span><br><span class=\"line\">    buildToolsVersion &apos;25.0.0&apos;</span><br><span class=\"line\">    aaptOptions.cruncherEnabled = false</span><br><span class=\"line\">    aaptOptions.useNewCruncher = false</span><br><span class=\"line\">   </span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t sourceSets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            res.srcDirs = [</span><br><span class=\"line\">                    &apos;src/main/res&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/activity&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/adapteritem&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/base&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/fragment&apos;,</span><br><span class=\"line\">                    &apos;src/main/res/layouts/view&apos;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意，将目录创建好后同步一下，工程要开到project模式才可见 ：)</p>\n"},{"title":"android多渠道多环境配置","date":"2017-11-17T10:00:42.000Z","thumbnail":"http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg","_content":"\n看完这篇你学到什么：\n\n- 熟悉gradle的构建配置\n- 熟悉代码构建环境的目录结构，你知道的不仅仅是只有src/main\n- 开发、生成环境等等环境可以任意切换打包\n- 多渠道打包\n- APK输出文件配置\n### 需求\n\n一般我们开发的环境分为：debug 和 release，但是你想再分内测1环境、内测2环境等等怎么办呢？\n\n这就需要依赖强大的gradle 来配置了。\n\n相关的配置也可以参考谷[歌官方文档](https://developer.android.google.cn/studio/build/build-variants.html?hl=zh-cn)。\n\n### 配置构建类型 `buildTypes`\n\n您可以在模块级 `build.gradle` 文件的 `android {}` 代码块内部创建和配置构建类型。当您创建新模块时，Android Studio 会自动为您创建调试和发布这两种构建类型。尽管调试构建类型不会出现在构建配置文件中，Android Studio 会将其配置为 `debuggable true`。这样，您可以在安全的 Android 设备上调试应用并使用通用调试密钥库配置 APK 签署。\n\n如果您希望添加或更改特定设置，您可以将调试构建类型添加到您的配置中。以下示例为调试构建类型指定了 `applicationIdSuffix`，并配置了一个使用调试构建类型中的设置进行初始化的`jnidebug`构建类型。\n\n`applicationIdSuffix`: 字段表示，在不改变你默认的程序ID（包名）的情况下，为其添加后缀。比如你的包名是`com.dh.app`，但你想区分测试包和正式包的情况，这个时候将`applicationIdSuffix`设置为`.debug`，那么你的应用程序对应的包名就变成了`com.rae.app.debug`\n\n```\nandroid {\n    ...\n    defaultConfig {...}\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        debug {\n            applicationIdSuffix \".debug\"\n        }\n\n        /**\n         * The 'initWith' property allows you to copy configurations from other build types,\n         * so you do not have to configure one from the beginning. You can then configure\n         * just the settings you want to change. The following line initializes\n         * 'jnidebug' using the debug build type, and changes only the\n         * applicationIdSuffix and versionNameSuffix settings.\n         */\n        jnidebug {\n            // This copies the debuggable attribute and debug signing configurations.\n            initWith debug\n            applicationIdSuffix \".jnidebug\"\n            jniDebuggable true\n        }\n    }\n}\n```\n\n### 构建源集\n\n我们都知道，源代码是放在`src/main` 文件夹下的，但是由于配置了不同的构建类型像想要区分不同的源文件怎么办呢？这个时候就可以在`src`对应你的`buildTypes`来建立文件夹了 ，更多参考谷歌源集。\n\nAndroid Studio 按逻辑关系将每个模块的源代码和资源分组为源集。模块的 `main/` 源集包括其所有构建变体共用的代码和资源。其他源集目录为可选项，在您配置新的构建变体时，Android Studio 不会自动为您创建这些目录。不过，创建类似于 `main/` 的源集有助于让 Gradle 只应在构建特定应用版本时使用的文件和资源井然有序：\n\n`productFlavor` 表示渠道包，可以看下面的多渠道打包\n\n> `src/main/`\n\n此源集包括所有构建变体共用的代码和资源。\n\n> src/`<buildType>`/\n\n创建此源集可加入特定构建类型专用的代码和资源。示例：`src/jnidebug`\n\n> src/`<productFlavor>`/\n\n创建此源集可加入特定产品风味专用的代码和资源。比如百度渠道包：`src/baidu`\n\n> src/`<productFlavorBuildType>`/\n\n创建此源集可加入特定构建变体专用的代码和资源。\n例如，要生成应用的“完全调试”版本，构建系统需要合并来自以下源集的代码、设置和资源。比如：百度的开发环境包：\n\n> src/baiduDebug\n\n构建类型依赖配置\n\n很多时候我们会把sdk或者api接口单独做成一个库，一般会有生产环境和测试环境之分，但在依赖的时候往往我们会像这样去引用：`compile project(':sdk')`，这样依赖的环境就是release，在开发调试的时候测试环境的时候就不行了。我们得换另外一种方式：\n\n> `<buildType>`Compile project()\n\n这样会根据不同的构建类型去依赖不同的包，比如我们测试环境的依赖包:`debugCompile project(':sdk')`，再比如上面的`jnidebug：jnidebugCompile project(':sdk')`\n\n那么问题来了，我当前的构建类型怎么对应到其他的`module`去呢？比如你的app要依赖sdk module 的debug 环境，那么你可以这么做：\n\n`configuration`：目标`module`的`<buildType>`，比如你sdk 中`<buildType>`的`debug`构建类型\n\n```\ndebugCompile project(path: ':sdk', configuration: 'debug')\n```\n\n> 综合示例：\n\n1、先看app这边的`build.gradle`配置：\n\n```\napply plugin: 'com.android.application'\nandroid {\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        debug {\n            applicationIdSuffix '.debug'\n            minifyEnabled false\n        }\n        \n        // 自定义的构建类型，名字随便取，一定要有意义\n        raedebug {\n            initWith debug\n            applicationIdSuffix '.raedebug'\n        }\n    }\n}\ndependencies {\n    // 生成环境依赖\n    releaseCompile project(path: ':sdk', configuration: 'release')\n    // 测试环境依赖\n    debugCompile project(path: ':sdk', configuration: 'debug')\n    // 自定义构建类型依赖\n    raedebugCompile project(path: ':sdk', configuration: 'uutest')\n}\n```\n2、sdk module的build.gradle配置：\n\n```\napply plugin: 'com.android.library'\nandroid {\n       buildTypes {\n        debug {\n            debuggable true\n            minifyEnabled false\n        }\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        \n        // 注意这里，跟第一点的 raedebugCompile project的configuration要匹配。\n        uutest {\n            initWith debug\n        }\n    }\n}\n```\n\n### 多渠道打包 `productFlavors`\n\n先看看`build.gradle`配置你就懂了\n\n```\nandroid{\n    // 渠道包定义，默认定义的名称就是渠道名称\n    productFlavors {\n \n        dev {} // 测试\n        baidu {}        // 百度手机助手\n        yinyongbao {}   // 应用宝\n        m360 {}         // 360手机助手\n        pp {}           // PP助手\n        anzhi{}         // 安智市场\n        xiaomi {}       // 小米商店\n        letv {}         // 乐视商店\n        huawei {}       // 华为商店\n        lenovomm {}     // 联想乐商店\n        other {}        // 其他市场\n        official{}      // 官方版本\n \n    }\n \n    // 批量渠道包值替换\n    productFlavors.all { flavor ->\n        // 友盟、极光推送渠道包， UMENG_CHANNEL 是根据你AndroidManifest.xml来配置的，请看下面。\n        flavor.manifestPlaceholders = [UMENG_CHANNEL: name, JPUSH_CHANNEL: name]\n    }\n```\n\n}\n`AndroidManifest.xml` 配置：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.rae.demo\">\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n       \n       <!--变量采用${变量名}这样来替换，不仅限与<meta-data /> 标签，任何你想替换的都行。-->\n         <meta-data\n            android:name=\"UMENG_APPKEY\"\n            android:value=\"${UMENG_APPKEY}\"/>\n        \n        <meta-data\n            android:name=\"UMENG_CHANNEL\"\n            android:value=\"${UMENG_CHANNEL}\"/>\n        \n        <!--${变量随变换}-->   \n        <activity\n            android:name=\".DemoActivity\"\n            android:label=\"${变量随变换}\"/>\n            \n    </application>\n</manifest>\n```\n\nsync gradle之后看看gradle projects 面板列表就多出了好到渠道的任务了，Build Variants 面板也相对应多了这些构建类型。\n\n### APK输出配置\n\n在结合到多渠道打包后，运营的那边希望我们给的渠道包是这种格式的`app-{版本号}-{渠道名称}.apk`，那我们来看看怎么来满足这个多渠道打包输出apk文件名修改的。\n\n\n```\nandroid{\n    // 输出文件配置\n   applicationVariants.all { variant ->\n        variant.outputs.each { output ->\n            def outputFile = output.outputFile\n            if (outputFile != null && outputFile.name.endsWith('.apk')) {\n                def dirName = outputFile.parent // 输出文件夹所在的位置\n            \n                // 文件名修改\n                def fileName = \"app-${output.processResources.variantName}-${defaultConfig.versionName}-${variant.flavorName}.apk\"\n                \n                // 比如不想这么麻烦，直接在后面加上版本号也行：\n                // def fileName = outputFile.name.replace(\".apk\", \"-${defaultConfig.versionName}.apk\")\n                \n                \n                output.outputFile = new File(dirName, fileName)\n            }\n        }\n    }\n}\n```\n","source":"_posts/android多渠道多环境配置.md","raw":"---\ntitle: android多渠道多环境配置\ndate: 2017-11-17 18:00:42\ntags: Android\ncategories: Android\nthumbnail: http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg\n---\n\n看完这篇你学到什么：\n\n- 熟悉gradle的构建配置\n- 熟悉代码构建环境的目录结构，你知道的不仅仅是只有src/main\n- 开发、生成环境等等环境可以任意切换打包\n- 多渠道打包\n- APK输出文件配置\n### 需求\n\n一般我们开发的环境分为：debug 和 release，但是你想再分内测1环境、内测2环境等等怎么办呢？\n\n这就需要依赖强大的gradle 来配置了。\n\n相关的配置也可以参考谷[歌官方文档](https://developer.android.google.cn/studio/build/build-variants.html?hl=zh-cn)。\n\n### 配置构建类型 `buildTypes`\n\n您可以在模块级 `build.gradle` 文件的 `android {}` 代码块内部创建和配置构建类型。当您创建新模块时，Android Studio 会自动为您创建调试和发布这两种构建类型。尽管调试构建类型不会出现在构建配置文件中，Android Studio 会将其配置为 `debuggable true`。这样，您可以在安全的 Android 设备上调试应用并使用通用调试密钥库配置 APK 签署。\n\n如果您希望添加或更改特定设置，您可以将调试构建类型添加到您的配置中。以下示例为调试构建类型指定了 `applicationIdSuffix`，并配置了一个使用调试构建类型中的设置进行初始化的`jnidebug`构建类型。\n\n`applicationIdSuffix`: 字段表示，在不改变你默认的程序ID（包名）的情况下，为其添加后缀。比如你的包名是`com.dh.app`，但你想区分测试包和正式包的情况，这个时候将`applicationIdSuffix`设置为`.debug`，那么你的应用程序对应的包名就变成了`com.rae.app.debug`\n\n```\nandroid {\n    ...\n    defaultConfig {...}\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        debug {\n            applicationIdSuffix \".debug\"\n        }\n\n        /**\n         * The 'initWith' property allows you to copy configurations from other build types,\n         * so you do not have to configure one from the beginning. You can then configure\n         * just the settings you want to change. The following line initializes\n         * 'jnidebug' using the debug build type, and changes only the\n         * applicationIdSuffix and versionNameSuffix settings.\n         */\n        jnidebug {\n            // This copies the debuggable attribute and debug signing configurations.\n            initWith debug\n            applicationIdSuffix \".jnidebug\"\n            jniDebuggable true\n        }\n    }\n}\n```\n\n### 构建源集\n\n我们都知道，源代码是放在`src/main` 文件夹下的，但是由于配置了不同的构建类型像想要区分不同的源文件怎么办呢？这个时候就可以在`src`对应你的`buildTypes`来建立文件夹了 ，更多参考谷歌源集。\n\nAndroid Studio 按逻辑关系将每个模块的源代码和资源分组为源集。模块的 `main/` 源集包括其所有构建变体共用的代码和资源。其他源集目录为可选项，在您配置新的构建变体时，Android Studio 不会自动为您创建这些目录。不过，创建类似于 `main/` 的源集有助于让 Gradle 只应在构建特定应用版本时使用的文件和资源井然有序：\n\n`productFlavor` 表示渠道包，可以看下面的多渠道打包\n\n> `src/main/`\n\n此源集包括所有构建变体共用的代码和资源。\n\n> src/`<buildType>`/\n\n创建此源集可加入特定构建类型专用的代码和资源。示例：`src/jnidebug`\n\n> src/`<productFlavor>`/\n\n创建此源集可加入特定产品风味专用的代码和资源。比如百度渠道包：`src/baidu`\n\n> src/`<productFlavorBuildType>`/\n\n创建此源集可加入特定构建变体专用的代码和资源。\n例如，要生成应用的“完全调试”版本，构建系统需要合并来自以下源集的代码、设置和资源。比如：百度的开发环境包：\n\n> src/baiduDebug\n\n构建类型依赖配置\n\n很多时候我们会把sdk或者api接口单独做成一个库，一般会有生产环境和测试环境之分，但在依赖的时候往往我们会像这样去引用：`compile project(':sdk')`，这样依赖的环境就是release，在开发调试的时候测试环境的时候就不行了。我们得换另外一种方式：\n\n> `<buildType>`Compile project()\n\n这样会根据不同的构建类型去依赖不同的包，比如我们测试环境的依赖包:`debugCompile project(':sdk')`，再比如上面的`jnidebug：jnidebugCompile project(':sdk')`\n\n那么问题来了，我当前的构建类型怎么对应到其他的`module`去呢？比如你的app要依赖sdk module 的debug 环境，那么你可以这么做：\n\n`configuration`：目标`module`的`<buildType>`，比如你sdk 中`<buildType>`的`debug`构建类型\n\n```\ndebugCompile project(path: ':sdk', configuration: 'debug')\n```\n\n> 综合示例：\n\n1、先看app这边的`build.gradle`配置：\n\n```\napply plugin: 'com.android.application'\nandroid {\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        debug {\n            applicationIdSuffix '.debug'\n            minifyEnabled false\n        }\n        \n        // 自定义的构建类型，名字随便取，一定要有意义\n        raedebug {\n            initWith debug\n            applicationIdSuffix '.raedebug'\n        }\n    }\n}\ndependencies {\n    // 生成环境依赖\n    releaseCompile project(path: ':sdk', configuration: 'release')\n    // 测试环境依赖\n    debugCompile project(path: ':sdk', configuration: 'debug')\n    // 自定义构建类型依赖\n    raedebugCompile project(path: ':sdk', configuration: 'uutest')\n}\n```\n2、sdk module的build.gradle配置：\n\n```\napply plugin: 'com.android.library'\nandroid {\n       buildTypes {\n        debug {\n            debuggable true\n            minifyEnabled false\n        }\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        \n        // 注意这里，跟第一点的 raedebugCompile project的configuration要匹配。\n        uutest {\n            initWith debug\n        }\n    }\n}\n```\n\n### 多渠道打包 `productFlavors`\n\n先看看`build.gradle`配置你就懂了\n\n```\nandroid{\n    // 渠道包定义，默认定义的名称就是渠道名称\n    productFlavors {\n \n        dev {} // 测试\n        baidu {}        // 百度手机助手\n        yinyongbao {}   // 应用宝\n        m360 {}         // 360手机助手\n        pp {}           // PP助手\n        anzhi{}         // 安智市场\n        xiaomi {}       // 小米商店\n        letv {}         // 乐视商店\n        huawei {}       // 华为商店\n        lenovomm {}     // 联想乐商店\n        other {}        // 其他市场\n        official{}      // 官方版本\n \n    }\n \n    // 批量渠道包值替换\n    productFlavors.all { flavor ->\n        // 友盟、极光推送渠道包， UMENG_CHANNEL 是根据你AndroidManifest.xml来配置的，请看下面。\n        flavor.manifestPlaceholders = [UMENG_CHANNEL: name, JPUSH_CHANNEL: name]\n    }\n```\n\n}\n`AndroidManifest.xml` 配置：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.rae.demo\">\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n       \n       <!--变量采用${变量名}这样来替换，不仅限与<meta-data /> 标签，任何你想替换的都行。-->\n         <meta-data\n            android:name=\"UMENG_APPKEY\"\n            android:value=\"${UMENG_APPKEY}\"/>\n        \n        <meta-data\n            android:name=\"UMENG_CHANNEL\"\n            android:value=\"${UMENG_CHANNEL}\"/>\n        \n        <!--${变量随变换}-->   \n        <activity\n            android:name=\".DemoActivity\"\n            android:label=\"${变量随变换}\"/>\n            \n    </application>\n</manifest>\n```\n\nsync gradle之后看看gradle projects 面板列表就多出了好到渠道的任务了，Build Variants 面板也相对应多了这些构建类型。\n\n### APK输出配置\n\n在结合到多渠道打包后，运营的那边希望我们给的渠道包是这种格式的`app-{版本号}-{渠道名称}.apk`，那我们来看看怎么来满足这个多渠道打包输出apk文件名修改的。\n\n\n```\nandroid{\n    // 输出文件配置\n   applicationVariants.all { variant ->\n        variant.outputs.each { output ->\n            def outputFile = output.outputFile\n            if (outputFile != null && outputFile.name.endsWith('.apk')) {\n                def dirName = outputFile.parent // 输出文件夹所在的位置\n            \n                // 文件名修改\n                def fileName = \"app-${output.processResources.variantName}-${defaultConfig.versionName}-${variant.flavorName}.apk\"\n                \n                // 比如不想这么麻烦，直接在后面加上版本号也行：\n                // def fileName = outputFile.name.replace(\".apk\", \"-${defaultConfig.versionName}.apk\")\n                \n                \n                output.outputFile = new File(dirName, fileName)\n            }\n        }\n    }\n}\n```\n","slug":"android多渠道多环境配置","published":1,"updated":"2017-11-21T08:59:40.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaj8l06f0005z8qbu16vzf27","content":"<p>看完这篇你学到什么：</p>\n<ul>\n<li>熟悉gradle的构建配置</li>\n<li>熟悉代码构建环境的目录结构，你知道的不仅仅是只有src/main</li>\n<li>开发、生成环境等等环境可以任意切换打包</li>\n<li>多渠道打包</li>\n<li>APK输出文件配置<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3></li>\n</ul>\n<p>一般我们开发的环境分为：debug 和 release，但是你想再分内测1环境、内测2环境等等怎么办呢？</p>\n<p>这就需要依赖强大的gradle 来配置了。</p>\n<p>相关的配置也可以参考谷<a href=\"https://developer.android.google.cn/studio/build/build-variants.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">歌官方文档</a>。</p>\n<h3 id=\"配置构建类型-buildTypes\"><a href=\"#配置构建类型-buildTypes\" class=\"headerlink\" title=\"配置构建类型 buildTypes\"></a>配置构建类型 <code>buildTypes</code></h3><p>您可以在模块级 <code>build.gradle</code> 文件的 <code>android {}</code> 代码块内部创建和配置构建类型。当您创建新模块时，Android Studio 会自动为您创建调试和发布这两种构建类型。尽管调试构建类型不会出现在构建配置文件中，Android Studio 会将其配置为 <code>debuggable true</code>。这样，您可以在安全的 Android 设备上调试应用并使用通用调试密钥库配置 APK 签署。</p>\n<p>如果您希望添加或更改特定设置，您可以将调试构建类型添加到您的配置中。以下示例为调试构建类型指定了 <code>applicationIdSuffix</code>，并配置了一个使用调试构建类型中的设置进行初始化的<code>jnidebug</code>构建类型。</p>\n<p><code>applicationIdSuffix</code>: 字段表示，在不改变你默认的程序ID（包名）的情况下，为其添加后缀。比如你的包名是<code>com.dh.app</code>，但你想区分测试包和正式包的情况，这个时候将<code>applicationIdSuffix</code>设置为<code>.debug</code>，那么你的应用程序对应的包名就变成了<code>com.rae.app.debug</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    defaultConfig &#123;...&#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            applicationIdSuffix &quot;.debug&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * The &apos;initWith&apos; property allows you to copy configurations from other build types,</span><br><span class=\"line\">         * so you do not have to configure one from the beginning. You can then configure</span><br><span class=\"line\">         * just the settings you want to change. The following line initializes</span><br><span class=\"line\">         * &apos;jnidebug&apos; using the debug build type, and changes only the</span><br><span class=\"line\">         * applicationIdSuffix and versionNameSuffix settings.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        jnidebug &#123;</span><br><span class=\"line\">            // This copies the debuggable attribute and debug signing configurations.</span><br><span class=\"line\">            initWith debug</span><br><span class=\"line\">            applicationIdSuffix &quot;.jnidebug&quot;</span><br><span class=\"line\">            jniDebuggable true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建源集\"><a href=\"#构建源集\" class=\"headerlink\" title=\"构建源集\"></a>构建源集</h3><p>我们都知道，源代码是放在<code>src/main</code> 文件夹下的，但是由于配置了不同的构建类型像想要区分不同的源文件怎么办呢？这个时候就可以在<code>src</code>对应你的<code>buildTypes</code>来建立文件夹了 ，更多参考谷歌源集。</p>\n<p>Android Studio 按逻辑关系将每个模块的源代码和资源分组为源集。模块的 <code>main/</code> 源集包括其所有构建变体共用的代码和资源。其他源集目录为可选项，在您配置新的构建变体时，Android Studio 不会自动为您创建这些目录。不过，创建类似于 <code>main/</code> 的源集有助于让 Gradle 只应在构建特定应用版本时使用的文件和资源井然有序：</p>\n<p><code>productFlavor</code> 表示渠道包，可以看下面的多渠道打包</p>\n<blockquote>\n<p><code>src/main/</code></p>\n</blockquote>\n<p>此源集包括所有构建变体共用的代码和资源。</p>\n<blockquote>\n<p>src/<code>&lt;buildType&gt;</code>/</p>\n</blockquote>\n<p>创建此源集可加入特定构建类型专用的代码和资源。示例：<code>src/jnidebug</code></p>\n<blockquote>\n<p>src/<code>&lt;productFlavor&gt;</code>/</p>\n</blockquote>\n<p>创建此源集可加入特定产品风味专用的代码和资源。比如百度渠道包：<code>src/baidu</code></p>\n<blockquote>\n<p>src/<code>&lt;productFlavorBuildType&gt;</code>/</p>\n</blockquote>\n<p>创建此源集可加入特定构建变体专用的代码和资源。<br>例如，要生成应用的“完全调试”版本，构建系统需要合并来自以下源集的代码、设置和资源。比如：百度的开发环境包：</p>\n<blockquote>\n<p>src/baiduDebug</p>\n</blockquote>\n<p>构建类型依赖配置</p>\n<p>很多时候我们会把sdk或者api接口单独做成一个库，一般会有生产环境和测试环境之分，但在依赖的时候往往我们会像这样去引用：<code>compile project(&#39;:sdk&#39;)</code>，这样依赖的环境就是release，在开发调试的时候测试环境的时候就不行了。我们得换另外一种方式：</p>\n<blockquote>\n<p><code>&lt;buildType&gt;</code>Compile project()</p>\n</blockquote>\n<p>这样会根据不同的构建类型去依赖不同的包，比如我们测试环境的依赖包:<code>debugCompile project(&#39;:sdk&#39;)</code>，再比如上面的<code>jnidebug：jnidebugCompile project(&#39;:sdk&#39;)</code></p>\n<p>那么问题来了，我当前的构建类型怎么对应到其他的<code>module</code>去呢？比如你的app要依赖sdk module 的debug 环境，那么你可以这么做：</p>\n<p><code>configuration</code>：目标<code>module</code>的<code>&lt;buildType&gt;</code>，比如你sdk 中<code>&lt;buildType&gt;</code>的<code>debug</code>构建类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debugCompile project(path: &apos;:sdk&apos;, configuration: &apos;debug&apos;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>综合示例：</p>\n</blockquote>\n<p>1、先看app这边的<code>build.gradle</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.application&apos;</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            applicationIdSuffix &apos;.debug&apos;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 自定义的构建类型，名字随便取，一定要有意义</span><br><span class=\"line\">        raedebug &#123;</span><br><span class=\"line\">            initWith debug</span><br><span class=\"line\">            applicationIdSuffix &apos;.raedebug&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    // 生成环境依赖</span><br><span class=\"line\">    releaseCompile project(path: &apos;:sdk&apos;, configuration: &apos;release&apos;)</span><br><span class=\"line\">    // 测试环境依赖</span><br><span class=\"line\">    debugCompile project(path: &apos;:sdk&apos;, configuration: &apos;debug&apos;)</span><br><span class=\"line\">    // 自定义构建类型依赖</span><br><span class=\"line\">    raedebugCompile project(path: &apos;:sdk&apos;, configuration: &apos;uutest&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、sdk module的build.gradle配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.library&apos;</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">       buildTypes &#123;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            debuggable true</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 注意这里，跟第一点的 raedebugCompile project的configuration要匹配。</span><br><span class=\"line\">        uutest &#123;</span><br><span class=\"line\">            initWith debug</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多渠道打包-productFlavors\"><a href=\"#多渠道打包-productFlavors\" class=\"headerlink\" title=\"多渠道打包 productFlavors\"></a>多渠道打包 <code>productFlavors</code></h3><p>先看看<code>build.gradle</code>配置你就懂了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;</span><br><span class=\"line\">    // 渠道包定义，默认定义的名称就是渠道名称</span><br><span class=\"line\">    productFlavors &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        dev &#123;&#125; // 测试</span><br><span class=\"line\">        baidu &#123;&#125;        // 百度手机助手</span><br><span class=\"line\">        yinyongbao &#123;&#125;   // 应用宝</span><br><span class=\"line\">        m360 &#123;&#125;         // 360手机助手</span><br><span class=\"line\">        pp &#123;&#125;           // PP助手</span><br><span class=\"line\">        anzhi&#123;&#125;         // 安智市场</span><br><span class=\"line\">        xiaomi &#123;&#125;       // 小米商店</span><br><span class=\"line\">        letv &#123;&#125;         // 乐视商店</span><br><span class=\"line\">        huawei &#123;&#125;       // 华为商店</span><br><span class=\"line\">        lenovomm &#123;&#125;     // 联想乐商店</span><br><span class=\"line\">        other &#123;&#125;        // 其他市场</span><br><span class=\"line\">        official&#123;&#125;      // 官方版本</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // 批量渠道包值替换</span><br><span class=\"line\">    productFlavors.all &#123; flavor -&gt;</span><br><span class=\"line\">        // 友盟、极光推送渠道包， UMENG_CHANNEL 是根据你AndroidManifest.xml来配置的，请看下面。</span><br><span class=\"line\">        flavor.manifestPlaceholders = [UMENG_CHANNEL: name, JPUSH_CHANNEL: name]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>}<br><code>AndroidManifest.xml</code> 配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">          package=&quot;com.rae.demo&quot;&gt;</span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">        android:allowBackup=&quot;true&quot;</span><br><span class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class=\"line\">        android:label=&quot;@string/app_name&quot;</span><br><span class=\"line\">        android:supportsRtl=&quot;true&quot;</span><br><span class=\"line\">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class=\"line\">       </span><br><span class=\"line\">       &lt;!--变量采用$&#123;变量名&#125;这样来替换，不仅限与&lt;meta-data /&gt; 标签，任何你想替换的都行。--&gt;</span><br><span class=\"line\">         &lt;meta-data</span><br><span class=\"line\">            android:name=&quot;UMENG_APPKEY&quot;</span><br><span class=\"line\">            android:value=&quot;$&#123;UMENG_APPKEY&#125;&quot;/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;meta-data</span><br><span class=\"line\">            android:name=&quot;UMENG_CHANNEL&quot;</span><br><span class=\"line\">            android:value=&quot;$&#123;UMENG_CHANNEL&#125;&quot;/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;!--$&#123;变量随变换&#125;--&gt;   </span><br><span class=\"line\">        &lt;activity</span><br><span class=\"line\">            android:name=&quot;.DemoActivity&quot;</span><br><span class=\"line\">            android:label=&quot;$&#123;变量随变换&#125;&quot;/&gt;</span><br><span class=\"line\">            </span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n<p>sync gradle之后看看gradle projects 面板列表就多出了好到渠道的任务了，Build Variants 面板也相对应多了这些构建类型。</p>\n<h3 id=\"APK输出配置\"><a href=\"#APK输出配置\" class=\"headerlink\" title=\"APK输出配置\"></a>APK输出配置</h3><p>在结合到多渠道打包后，运营的那边希望我们给的渠道包是这种格式的<code>app-{版本号}-{渠道名称}.apk</code>，那我们来看看怎么来满足这个多渠道打包输出apk文件名修改的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;</span><br><span class=\"line\">    // 输出文件配置</span><br><span class=\"line\">   applicationVariants.all &#123; variant -&gt;</span><br><span class=\"line\">        variant.outputs.each &#123; output -&gt;</span><br><span class=\"line\">            def outputFile = output.outputFile</span><br><span class=\"line\">            if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</span><br><span class=\"line\">                def dirName = outputFile.parent // 输出文件夹所在的位置</span><br><span class=\"line\">            </span><br><span class=\"line\">                // 文件名修改</span><br><span class=\"line\">                def fileName = &quot;app-$&#123;output.processResources.variantName&#125;-$&#123;defaultConfig.versionName&#125;-$&#123;variant.flavorName&#125;.apk&quot;</span><br><span class=\"line\">                </span><br><span class=\"line\">                // 比如不想这么麻烦，直接在后面加上版本号也行：</span><br><span class=\"line\">                // def fileName = outputFile.name.replace(&quot;.apk&quot;, &quot;-$&#123;defaultConfig.versionName&#125;.apk&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                output.outputFile = new File(dirName, fileName)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>看完这篇你学到什么：</p>\n<ul>\n<li>熟悉gradle的构建配置</li>\n<li>熟悉代码构建环境的目录结构，你知道的不仅仅是只有src/main</li>\n<li>开发、生成环境等等环境可以任意切换打包</li>\n<li>多渠道打包</li>\n<li>APK输出文件配置<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3></li>\n</ul>\n<p>一般我们开发的环境分为：debug 和 release，但是你想再分内测1环境、内测2环境等等怎么办呢？</p>\n<p>这就需要依赖强大的gradle 来配置了。</p>\n<p>相关的配置也可以参考谷<a href=\"https://developer.android.google.cn/studio/build/build-variants.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">歌官方文档</a>。</p>\n<h3 id=\"配置构建类型-buildTypes\"><a href=\"#配置构建类型-buildTypes\" class=\"headerlink\" title=\"配置构建类型 buildTypes\"></a>配置构建类型 <code>buildTypes</code></h3><p>您可以在模块级 <code>build.gradle</code> 文件的 <code>android {}</code> 代码块内部创建和配置构建类型。当您创建新模块时，Android Studio 会自动为您创建调试和发布这两种构建类型。尽管调试构建类型不会出现在构建配置文件中，Android Studio 会将其配置为 <code>debuggable true</code>。这样，您可以在安全的 Android 设备上调试应用并使用通用调试密钥库配置 APK 签署。</p>\n<p>如果您希望添加或更改特定设置，您可以将调试构建类型添加到您的配置中。以下示例为调试构建类型指定了 <code>applicationIdSuffix</code>，并配置了一个使用调试构建类型中的设置进行初始化的<code>jnidebug</code>构建类型。</p>\n<p><code>applicationIdSuffix</code>: 字段表示，在不改变你默认的程序ID（包名）的情况下，为其添加后缀。比如你的包名是<code>com.dh.app</code>，但你想区分测试包和正式包的情况，这个时候将<code>applicationIdSuffix</code>设置为<code>.debug</code>，那么你的应用程序对应的包名就变成了<code>com.rae.app.debug</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    defaultConfig &#123;...&#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            applicationIdSuffix &quot;.debug&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * The &apos;initWith&apos; property allows you to copy configurations from other build types,</span><br><span class=\"line\">         * so you do not have to configure one from the beginning. You can then configure</span><br><span class=\"line\">         * just the settings you want to change. The following line initializes</span><br><span class=\"line\">         * &apos;jnidebug&apos; using the debug build type, and changes only the</span><br><span class=\"line\">         * applicationIdSuffix and versionNameSuffix settings.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        jnidebug &#123;</span><br><span class=\"line\">            // This copies the debuggable attribute and debug signing configurations.</span><br><span class=\"line\">            initWith debug</span><br><span class=\"line\">            applicationIdSuffix &quot;.jnidebug&quot;</span><br><span class=\"line\">            jniDebuggable true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建源集\"><a href=\"#构建源集\" class=\"headerlink\" title=\"构建源集\"></a>构建源集</h3><p>我们都知道，源代码是放在<code>src/main</code> 文件夹下的，但是由于配置了不同的构建类型像想要区分不同的源文件怎么办呢？这个时候就可以在<code>src</code>对应你的<code>buildTypes</code>来建立文件夹了 ，更多参考谷歌源集。</p>\n<p>Android Studio 按逻辑关系将每个模块的源代码和资源分组为源集。模块的 <code>main/</code> 源集包括其所有构建变体共用的代码和资源。其他源集目录为可选项，在您配置新的构建变体时，Android Studio 不会自动为您创建这些目录。不过，创建类似于 <code>main/</code> 的源集有助于让 Gradle 只应在构建特定应用版本时使用的文件和资源井然有序：</p>\n<p><code>productFlavor</code> 表示渠道包，可以看下面的多渠道打包</p>\n<blockquote>\n<p><code>src/main/</code></p>\n</blockquote>\n<p>此源集包括所有构建变体共用的代码和资源。</p>\n<blockquote>\n<p>src/<code>&lt;buildType&gt;</code>/</p>\n</blockquote>\n<p>创建此源集可加入特定构建类型专用的代码和资源。示例：<code>src/jnidebug</code></p>\n<blockquote>\n<p>src/<code>&lt;productFlavor&gt;</code>/</p>\n</blockquote>\n<p>创建此源集可加入特定产品风味专用的代码和资源。比如百度渠道包：<code>src/baidu</code></p>\n<blockquote>\n<p>src/<code>&lt;productFlavorBuildType&gt;</code>/</p>\n</blockquote>\n<p>创建此源集可加入特定构建变体专用的代码和资源。<br>例如，要生成应用的“完全调试”版本，构建系统需要合并来自以下源集的代码、设置和资源。比如：百度的开发环境包：</p>\n<blockquote>\n<p>src/baiduDebug</p>\n</blockquote>\n<p>构建类型依赖配置</p>\n<p>很多时候我们会把sdk或者api接口单独做成一个库，一般会有生产环境和测试环境之分，但在依赖的时候往往我们会像这样去引用：<code>compile project(&#39;:sdk&#39;)</code>，这样依赖的环境就是release，在开发调试的时候测试环境的时候就不行了。我们得换另外一种方式：</p>\n<blockquote>\n<p><code>&lt;buildType&gt;</code>Compile project()</p>\n</blockquote>\n<p>这样会根据不同的构建类型去依赖不同的包，比如我们测试环境的依赖包:<code>debugCompile project(&#39;:sdk&#39;)</code>，再比如上面的<code>jnidebug：jnidebugCompile project(&#39;:sdk&#39;)</code></p>\n<p>那么问题来了，我当前的构建类型怎么对应到其他的<code>module</code>去呢？比如你的app要依赖sdk module 的debug 环境，那么你可以这么做：</p>\n<p><code>configuration</code>：目标<code>module</code>的<code>&lt;buildType&gt;</code>，比如你sdk 中<code>&lt;buildType&gt;</code>的<code>debug</code>构建类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debugCompile project(path: &apos;:sdk&apos;, configuration: &apos;debug&apos;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>综合示例：</p>\n</blockquote>\n<p>1、先看app这边的<code>build.gradle</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.application&apos;</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            applicationIdSuffix &apos;.debug&apos;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 自定义的构建类型，名字随便取，一定要有意义</span><br><span class=\"line\">        raedebug &#123;</span><br><span class=\"line\">            initWith debug</span><br><span class=\"line\">            applicationIdSuffix &apos;.raedebug&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    // 生成环境依赖</span><br><span class=\"line\">    releaseCompile project(path: &apos;:sdk&apos;, configuration: &apos;release&apos;)</span><br><span class=\"line\">    // 测试环境依赖</span><br><span class=\"line\">    debugCompile project(path: &apos;:sdk&apos;, configuration: &apos;debug&apos;)</span><br><span class=\"line\">    // 自定义构建类型依赖</span><br><span class=\"line\">    raedebugCompile project(path: &apos;:sdk&apos;, configuration: &apos;uutest&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、sdk module的build.gradle配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.library&apos;</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">       buildTypes &#123;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            debuggable true</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 注意这里，跟第一点的 raedebugCompile project的configuration要匹配。</span><br><span class=\"line\">        uutest &#123;</span><br><span class=\"line\">            initWith debug</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多渠道打包-productFlavors\"><a href=\"#多渠道打包-productFlavors\" class=\"headerlink\" title=\"多渠道打包 productFlavors\"></a>多渠道打包 <code>productFlavors</code></h3><p>先看看<code>build.gradle</code>配置你就懂了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;</span><br><span class=\"line\">    // 渠道包定义，默认定义的名称就是渠道名称</span><br><span class=\"line\">    productFlavors &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        dev &#123;&#125; // 测试</span><br><span class=\"line\">        baidu &#123;&#125;        // 百度手机助手</span><br><span class=\"line\">        yinyongbao &#123;&#125;   // 应用宝</span><br><span class=\"line\">        m360 &#123;&#125;         // 360手机助手</span><br><span class=\"line\">        pp &#123;&#125;           // PP助手</span><br><span class=\"line\">        anzhi&#123;&#125;         // 安智市场</span><br><span class=\"line\">        xiaomi &#123;&#125;       // 小米商店</span><br><span class=\"line\">        letv &#123;&#125;         // 乐视商店</span><br><span class=\"line\">        huawei &#123;&#125;       // 华为商店</span><br><span class=\"line\">        lenovomm &#123;&#125;     // 联想乐商店</span><br><span class=\"line\">        other &#123;&#125;        // 其他市场</span><br><span class=\"line\">        official&#123;&#125;      // 官方版本</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // 批量渠道包值替换</span><br><span class=\"line\">    productFlavors.all &#123; flavor -&gt;</span><br><span class=\"line\">        // 友盟、极光推送渠道包， UMENG_CHANNEL 是根据你AndroidManifest.xml来配置的，请看下面。</span><br><span class=\"line\">        flavor.manifestPlaceholders = [UMENG_CHANNEL: name, JPUSH_CHANNEL: name]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>}<br><code>AndroidManifest.xml</code> 配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">          package=&quot;com.rae.demo&quot;&gt;</span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">        android:allowBackup=&quot;true&quot;</span><br><span class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class=\"line\">        android:label=&quot;@string/app_name&quot;</span><br><span class=\"line\">        android:supportsRtl=&quot;true&quot;</span><br><span class=\"line\">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class=\"line\">       </span><br><span class=\"line\">       &lt;!--变量采用$&#123;变量名&#125;这样来替换，不仅限与&lt;meta-data /&gt; 标签，任何你想替换的都行。--&gt;</span><br><span class=\"line\">         &lt;meta-data</span><br><span class=\"line\">            android:name=&quot;UMENG_APPKEY&quot;</span><br><span class=\"line\">            android:value=&quot;$&#123;UMENG_APPKEY&#125;&quot;/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;meta-data</span><br><span class=\"line\">            android:name=&quot;UMENG_CHANNEL&quot;</span><br><span class=\"line\">            android:value=&quot;$&#123;UMENG_CHANNEL&#125;&quot;/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;!--$&#123;变量随变换&#125;--&gt;   </span><br><span class=\"line\">        &lt;activity</span><br><span class=\"line\">            android:name=&quot;.DemoActivity&quot;</span><br><span class=\"line\">            android:label=&quot;$&#123;变量随变换&#125;&quot;/&gt;</span><br><span class=\"line\">            </span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n<p>sync gradle之后看看gradle projects 面板列表就多出了好到渠道的任务了，Build Variants 面板也相对应多了这些构建类型。</p>\n<h3 id=\"APK输出配置\"><a href=\"#APK输出配置\" class=\"headerlink\" title=\"APK输出配置\"></a>APK输出配置</h3><p>在结合到多渠道打包后，运营的那边希望我们给的渠道包是这种格式的<code>app-{版本号}-{渠道名称}.apk</code>，那我们来看看怎么来满足这个多渠道打包输出apk文件名修改的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;</span><br><span class=\"line\">    // 输出文件配置</span><br><span class=\"line\">   applicationVariants.all &#123; variant -&gt;</span><br><span class=\"line\">        variant.outputs.each &#123; output -&gt;</span><br><span class=\"line\">            def outputFile = output.outputFile</span><br><span class=\"line\">            if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</span><br><span class=\"line\">                def dirName = outputFile.parent // 输出文件夹所在的位置</span><br><span class=\"line\">            </span><br><span class=\"line\">                // 文件名修改</span><br><span class=\"line\">                def fileName = &quot;app-$&#123;output.processResources.variantName&#125;-$&#123;defaultConfig.versionName&#125;-$&#123;variant.flavorName&#125;.apk&quot;</span><br><span class=\"line\">                </span><br><span class=\"line\">                // 比如不想这么麻烦，直接在后面加上版本号也行：</span><br><span class=\"line\">                // def fileName = outputFile.name.replace(&quot;.apk&quot;, &quot;-$&#123;defaultConfig.versionName&#125;.apk&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                output.outputFile = new File(dirName, fileName)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"新建文档","date":"2017-11-15T09:44:50.000Z","_content":"# 第一篇测试\n图片\n\n![这里写图片描述](http://p3.so.qhimgs1.com/t013394760fc112d533.jpg)\n\n代码\n\n```\n<script>\n  import VmMarkdown from 'vm-markdown';\n    export default {\n      components: {\n        VmMarkdown\n      },\n        methods: {\n          showHtml (html) {\n            // get html string here\n          }\n        }\n    };\n</script>\n```","source":"_posts/新建文档.md","raw":"---\ntitle: 新建文档\ndate: 2017-11-15 17:44:50\ntags:\ncategories: Android\n---\n# 第一篇测试\n图片\n\n![这里写图片描述](http://p3.so.qhimgs1.com/t013394760fc112d533.jpg)\n\n代码\n\n```\n<script>\n  import VmMarkdown from 'vm-markdown';\n    export default {\n      components: {\n        VmMarkdown\n      },\n        methods: {\n          showHtml (html) {\n            // get html string here\n          }\n        }\n    };\n</script>\n```","slug":"新建文档","published":1,"updated":"2017-11-21T09:00:07.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaj8l06p0006z8qbclh67o8n","content":"<h1 id=\"第一篇测试\"><a href=\"#第一篇测试\" class=\"headerlink\" title=\"第一篇测试\"></a>第一篇测试</h1><p>图片</p>\n<p><img src=\"http://p3.so.qhimgs1.com/t013394760fc112d533.jpg\" alt=\"这里写图片描述\"></p>\n<p>代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import VmMarkdown from &apos;vm-markdown&apos;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        VmMarkdown</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          showHtml (html) &#123;</span><br><span class=\"line\">            // get html string here</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一篇测试\"><a href=\"#第一篇测试\" class=\"headerlink\" title=\"第一篇测试\"></a>第一篇测试</h1><p>图片</p>\n<p><img src=\"http://p3.so.qhimgs1.com/t013394760fc112d533.jpg\" alt=\"这里写图片描述\"></p>\n<p>代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import VmMarkdown from &apos;vm-markdown&apos;;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        VmMarkdown</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          showHtml (html) &#123;</span><br><span class=\"line\">            // get html string here</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"android打包到指定目录","date":"2017-11-17T09:18:27.000Z","thumbnail":"http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg","_content":"将打出来的包用dradle脚本放到指定的目录下并显示渠道名 如 app-dahai-debug-1.0.apk\n```\n    applicationVariants.all { variant ->\n        variant.outputs.each { output ->\n            def outputFile = output.outputFile\n            if (outputFile != null && outputFile.name.endsWith('.apk')) {\n                def dirName = APP_OUTPUT_DIR + \"v${defaultConfig.versionName}\"\n                def fileName = outputFile.name.replace(\".apk\", \"-${defaultConfig.versionName}.apk\")\n                output.outputFile = new File(dirName, fileName)\n            }\n        }\n    }\n```\n```\n在gradle.properties文件中定义文件的路劲如 APP_OUTPUT_DIR = F\\:\\\\\n```","source":"_posts/android打包到指定目录.md","raw":"---\ntitle: android打包到指定目录\ndate: 2017-11-17 17:18:27\ntags: Android\ncategories: Android\nthumbnail: http://p2.so.qhimgs1.com/t019f9129d3d99e30d2.jpg\n---\n将打出来的包用dradle脚本放到指定的目录下并显示渠道名 如 app-dahai-debug-1.0.apk\n```\n    applicationVariants.all { variant ->\n        variant.outputs.each { output ->\n            def outputFile = output.outputFile\n            if (outputFile != null && outputFile.name.endsWith('.apk')) {\n                def dirName = APP_OUTPUT_DIR + \"v${defaultConfig.versionName}\"\n                def fileName = outputFile.name.replace(\".apk\", \"-${defaultConfig.versionName}.apk\")\n                output.outputFile = new File(dirName, fileName)\n            }\n        }\n    }\n```\n```\n在gradle.properties文件中定义文件的路劲如 APP_OUTPUT_DIR = F\\:\\\\\n```","slug":"android打包到指定目录","published":1,"updated":"2017-11-21T08:59:31.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaj8l071000cz8qbdcs53ir8","content":"<p>将打出来的包用dradle脚本放到指定的目录下并显示渠道名 如 app-dahai-debug-1.0.apk<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applicationVariants.all &#123; variant -&gt;</span><br><span class=\"line\">    variant.outputs.each &#123; output -&gt;</span><br><span class=\"line\">        def outputFile = output.outputFile</span><br><span class=\"line\">        if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</span><br><span class=\"line\">            def dirName = APP_OUTPUT_DIR + &quot;v$&#123;defaultConfig.versionName&#125;&quot;</span><br><span class=\"line\">            def fileName = outputFile.name.replace(&quot;.apk&quot;, &quot;-$&#123;defaultConfig.versionName&#125;.apk&quot;)</span><br><span class=\"line\">            output.outputFile = new File(dirName, fileName)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在gradle.properties文件中定义文件的路劲如 APP_OUTPUT_DIR = F\\:\\\\</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>将打出来的包用dradle脚本放到指定的目录下并显示渠道名 如 app-dahai-debug-1.0.apk<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applicationVariants.all &#123; variant -&gt;</span><br><span class=\"line\">    variant.outputs.each &#123; output -&gt;</span><br><span class=\"line\">        def outputFile = output.outputFile</span><br><span class=\"line\">        if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</span><br><span class=\"line\">            def dirName = APP_OUTPUT_DIR + &quot;v$&#123;defaultConfig.versionName&#125;&quot;</span><br><span class=\"line\">            def fileName = outputFile.name.replace(&quot;.apk&quot;, &quot;-$&#123;defaultConfig.versionName&#125;.apk&quot;)</span><br><span class=\"line\">            output.outputFile = new File(dirName, fileName)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在gradle.properties文件中定义文件的路劲如 APP_OUTPUT_DIR = F\\:\\\\</span><br></pre></td></tr></table></figure>"},{"title":"想到的任务","date":"2018-01-09T01:28:00.000Z","_content":"\n - Android音视频录取，压缩及上传\n - okhttp深入了解及HTTP了解\n - socket通讯\n - 多线程\n - 整理k线图封装成fragment","source":"_posts/2018必须做好规划.md","raw":"---\ntitle: 想到的任务\ndate: 2018-1-9 9:28\ntags:\ncategories: Android\n---\n\n - Android音视频录取，压缩及上传\n - okhttp深入了解及HTTP了解\n - socket通讯\n - 多线程\n - 整理k线图封装成fragment","slug":"2018必须做好规划","published":1,"updated":"2018-01-09T01:34:39.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc6ys14z0000n4qbeqplfksw","content":"<ul>\n<li>Android音视频录取，压缩及上传</li>\n<li>okhttp深入了解及HTTP了解</li>\n<li>socket通讯</li>\n<li>多线程</li>\n<li>整理k线图封装成fragment</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Android音视频录取，压缩及上传</li>\n<li>okhttp深入了解及HTTP了解</li>\n<li>socket通讯</li>\n<li>多线程</li>\n<li>整理k线图封装成fragment</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjaj8l06f0005z8qbu16vzf27","category_id":"cjaj8l0610002z8qbbg8l6yb0","_id":"cjaj8l075000dz8qb8y83iuco"},{"post_id":"cjaj8l05f0000z8qbvvbnodyy","category_id":"cjaj8l0610002z8qbbg8l6yb0","_id":"cjaj8l07f000hz8qbgttxpmnx"},{"post_id":"cjaj8l06p0006z8qbclh67o8n","category_id":"cjaj8l0610002z8qbbg8l6yb0","_id":"cjaj8l07j000jz8qbu1tt07qr"},{"post_id":"cjaj8l05p0001z8qb86xzu7yw","category_id":"cjaj8l0610002z8qbbg8l6yb0","_id":"cjaj8l07p000mz8qbsjxdf5jj"},{"post_id":"cjaj8l071000cz8qbdcs53ir8","category_id":"cjaj8l0610002z8qbbg8l6yb0","_id":"cjaj8l07q000nz8qb1aseti3c"},{"post_id":"cjaj8l0660004z8qba1x8erh1","category_id":"cjaj8l0610002z8qbbg8l6yb0","_id":"cjaj8l07q000oz8qbu02jq5u0"},{"post_id":"cjc6ys14z0000n4qbeqplfksw","category_id":"cjaj8l0610002z8qbbg8l6yb0","_id":"cjc6ys1580001n4qbtfhjf22i"}],"PostTag":[{"post_id":"cjaj8l06f0005z8qbu16vzf27","tag_id":"cjaj8l0650003z8qb0notxg3w","_id":"cjaj8l06u0009z8qbujkeg6zu"},{"post_id":"cjaj8l05f0000z8qbvvbnodyy","tag_id":"cjaj8l0650003z8qb0notxg3w","_id":"cjaj8l06y000bz8qbxo5gmxys"},{"post_id":"cjaj8l05p0001z8qb86xzu7yw","tag_id":"cjaj8l0650003z8qb0notxg3w","_id":"cjaj8l07c000gz8qb62q98k2i"},{"post_id":"cjaj8l071000cz8qbdcs53ir8","tag_id":"cjaj8l0650003z8qb0notxg3w","_id":"cjaj8l07i000iz8qbdqpbuqce"},{"post_id":"cjaj8l0660004z8qba1x8erh1","tag_id":"cjaj8l0650003z8qb0notxg3w","_id":"cjaj8l07l000kz8qbdrvaej2u"}],"Tag":[{"name":"Android","_id":"cjaj8l0650003z8qb0notxg3w"}]}}